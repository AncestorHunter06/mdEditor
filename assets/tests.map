{"version":3,"sources":["mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.js","mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.jshint.js","mdeditor/tests/acceptance/pods/contact/new-test.js","mdeditor/tests/acceptance/pods/contact/new-test.jshint.js","mdeditor/tests/acceptance/pods/dictionary/new-test.js","mdeditor/tests/acceptance/pods/dictionary/new-test.jshint.js","mdeditor/tests/acceptance/pods/record/new-test.js","mdeditor/tests/acceptance/pods/record/new-test.jshint.js","mdeditor/tests/adapters/application.jshint.js","mdeditor/tests/app.jshint.js","mdeditor/tests/helpers/create-contact.js","mdeditor/tests/helpers/create-contact.jshint.js","mdeditor/tests/helpers/create-dictionary.js","mdeditor/tests/helpers/create-dictionary.jshint.js","mdeditor/tests/helpers/create-record.js","mdeditor/tests/helpers/create-record.jshint.js","mdeditor/tests/helpers/destroy-app.js","mdeditor/tests/helpers/destroy-app.jshint.js","mdeditor/tests/helpers/module-for-acceptance.js","mdeditor/tests/helpers/module-for-acceptance.jshint.js","mdeditor/tests/helpers/resolver.js","mdeditor/tests/helpers/resolver.jshint.js","mdeditor/tests/helpers/start-app.js","mdeditor/tests/helpers/start-app.jshint.js","mdeditor/tests/integration/pods/components/input/md-boolean/component-test.js","mdeditor/tests/integration/pods/components/input/md-boolean/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-codelist/component-test.js","mdeditor/tests/integration/pods/components/input/md-codelist/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.js","mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-datetime/component-test.js","mdeditor/tests/integration/pods/components/input/md-datetime/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-input/component-test.js","mdeditor/tests/integration/pods/components/input/md-input/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-inputs/component-test.js","mdeditor/tests/integration/pods/components/input/md-inputs/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-select/component-test.js","mdeditor/tests/integration/pods/components/input/md-select/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.js","mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-textarea/component-test.js","mdeditor/tests/integration/pods/components/input/md-textarea/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.jshint.js","mdeditor/tests/integration/pods/components/md-help/component-test.js","mdeditor/tests/integration/pods/components/md-help/component-test.jshint.js","mdeditor/tests/models/contact.jshint.js","mdeditor/tests/models/dictionary.jshint.js","mdeditor/tests/models/record.jshint.js","mdeditor/tests/pods/components/input/md-boolean/component.jshint.js","mdeditor/tests/pods/components/input/md-codelist/component.jshint.js","mdeditor/tests/pods/components/input/md-codelist-multi/component.jshint.js","mdeditor/tests/pods/components/input/md-datetime/component.jshint.js","mdeditor/tests/pods/components/input/md-input/component.jshint.js","mdeditor/tests/pods/components/input/md-inputs/component.jshint.js","mdeditor/tests/pods/components/input/md-select/component.jshint.js","mdeditor/tests/pods/components/input/md-select-profile/component.jshint.js","mdeditor/tests/pods/components/input/md-textarea/component.jshint.js","mdeditor/tests/pods/components/layout/md-breadcrumb/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-main/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-secondary/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-sidebar/component.jshint.js","mdeditor/tests/pods/components/md-help/component.jshint.js","mdeditor/tests/pods/contact/new/route.jshint.js","mdeditor/tests/pods/contact/route.jshint.js","mdeditor/tests/pods/contact/show/edit/route.jshint.js","mdeditor/tests/pods/contact/show/route.jshint.js","mdeditor/tests/pods/contacts/route.jshint.js","mdeditor/tests/pods/dashboard/route.jshint.js","mdeditor/tests/pods/dictionaries/route.jshint.js","mdeditor/tests/pods/dictionary/new/route.jshint.js","mdeditor/tests/pods/dictionary/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/domains/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/entities/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/index/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/route.jshint.js","mdeditor/tests/pods/dictionary/show/route.jshint.js","mdeditor/tests/pods/export/route.jshint.js","mdeditor/tests/pods/help/route.jshint.js","mdeditor/tests/pods/import/route.jshint.js","mdeditor/tests/pods/publish/route.jshint.js","mdeditor/tests/pods/record/new/route.jshint.js","mdeditor/tests/pods/record/show/edit/associated/route.jshint.js","mdeditor/tests/pods/record/show/edit/coverages/route.jshint.js","mdeditor/tests/pods/record/show/edit/distribution/route.jshint.js","mdeditor/tests/pods/record/show/edit/documents/route.jshint.js","mdeditor/tests/pods/record/show/edit/grid/route.jshint.js","mdeditor/tests/pods/record/show/edit/index/route.jshint.js","mdeditor/tests/pods/record/show/edit/keywords/route.jshint.js","mdeditor/tests/pods/record/show/edit/metadata/route.jshint.js","mdeditor/tests/pods/record/show/edit/quality/route.jshint.js","mdeditor/tests/pods/record/show/edit/route.jshint.js","mdeditor/tests/pods/record/show/edit/spatial/route.jshint.js","mdeditor/tests/pods/record/show/route.jshint.js","mdeditor/tests/pods/records/route.jshint.js","mdeditor/tests/pods/save/route.jshint.js","mdeditor/tests/pods/settings/route.jshint.js","mdeditor/tests/pods/translate/route.jshint.js","mdeditor/tests/router.jshint.js","mdeditor/tests/routes/application.jshint.js","mdeditor/tests/routes/index.jshint.js","mdeditor/tests/serializers/application.jshint.js","mdeditor/tests/services/codelist.jshint.js","mdeditor/tests/services/icon.jshint.js","mdeditor/tests/services/profile.jshint.js","mdeditor/tests/test-helper.js","mdeditor/tests/test-helper.jshint.js","mdeditor/tests/transforms/json.jshint.js","mdeditor/tests/unit/adapters/application-test.js","mdeditor/tests/unit/adapters/application-test.jshint.js","mdeditor/tests/unit/models/contact-test.js","mdeditor/tests/unit/models/contact-test.jshint.js","mdeditor/tests/unit/models/dictionary-test.js","mdeditor/tests/unit/models/dictionary-test.jshint.js","mdeditor/tests/unit/models/record-test.js","mdeditor/tests/unit/models/record-test.jshint.js","mdeditor/tests/unit/pods/contact/new/route-test.js","mdeditor/tests/unit/pods/contact/new/route-test.jshint.js","mdeditor/tests/unit/pods/contact/show/edit/route-test.js","mdeditor/tests/unit/pods/contact/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/contact/show/route-test.js","mdeditor/tests/unit/pods/contact/show/route-test.jshint.js","mdeditor/tests/unit/pods/contacts/route-test.js","mdeditor/tests/unit/pods/contacts/route-test.jshint.js","mdeditor/tests/unit/pods/dashboard/route-test.js","mdeditor/tests/unit/pods/dashboard/route-test.jshint.js","mdeditor/tests/unit/pods/dictionaries/route-test.js","mdeditor/tests/unit/pods/dictionaries/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/new/route-test.js","mdeditor/tests/unit/pods/dictionary/new/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/route-test.js","mdeditor/tests/unit/pods/dictionary/show/route-test.jshint.js","mdeditor/tests/unit/pods/export/route-test.js","mdeditor/tests/unit/pods/export/route-test.jshint.js","mdeditor/tests/unit/pods/help/route-test.js","mdeditor/tests/unit/pods/help/route-test.jshint.js","mdeditor/tests/unit/pods/import/route-test.js","mdeditor/tests/unit/pods/import/route-test.jshint.js","mdeditor/tests/unit/pods/publish/route-test.js","mdeditor/tests/unit/pods/publish/route-test.jshint.js","mdeditor/tests/unit/pods/record/new/route-test.js","mdeditor/tests/unit/pods/record/new/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/associated/route-test.js","mdeditor/tests/unit/pods/record/show/edit/associated/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.js","mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.js","mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/documents/route-test.js","mdeditor/tests/unit/pods/record/show/edit/documents/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/grid/route-test.js","mdeditor/tests/unit/pods/record/show/edit/grid/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/index/route-test.js","mdeditor/tests/unit/pods/record/show/edit/index/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.js","mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.js","mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/quality/route-test.js","mdeditor/tests/unit/pods/record/show/edit/quality/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/route-test.js","mdeditor/tests/unit/pods/record/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.js","mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/route-test.js","mdeditor/tests/unit/pods/record/show/route-test.jshint.js","mdeditor/tests/unit/pods/records/route-test.js","mdeditor/tests/unit/pods/records/route-test.jshint.js","mdeditor/tests/unit/pods/settings/route-test.js","mdeditor/tests/unit/pods/settings/route-test.jshint.js","mdeditor/tests/unit/pods/translate/route-test.js","mdeditor/tests/unit/pods/translate/route-test.jshint.js","mdeditor/tests/unit/routes/application-test.js","mdeditor/tests/unit/routes/application-test.jshint.js","mdeditor/tests/unit/routes/index-test.js","mdeditor/tests/unit/routes/index-test.jshint.js","mdeditor/tests/unit/serializers/application-test.js","mdeditor/tests/unit/serializers/application-test.jshint.js","mdeditor/tests/unit/services/codelist-test.js","mdeditor/tests/unit/services/codelist-test.jshint.js","mdeditor/tests/unit/services/icon-test.js","mdeditor/tests/unit/services/icon-test.jshint.js","mdeditor/tests/unit/services/profile-test.js","mdeditor/tests/unit/services/profile-test.jshint.js","mdeditor/tests/unit/transforms/json-test.js","mdeditor/tests/unit/transforms/json-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  var componentInstance = undefined;\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/components/md breadcrumb', {\n    beforeEach: function beforeEach() {\n      componentInstance = this.application.__container__.lookup('component:layout/md-breadcrumb');\n    },\n    afterEach: function afterEach() {\n      componentInstance = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /record/new', function (assert) {\n    assert.expect(5);\n\n    visit('/record/new');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/record/new');\n\n      var listItems = find('ol.breadcrumb li').text();\n      var linkItems = find('ol.breadcrumb li a').text();\n\n      var hasRecordInallList = listItems.indexOf('Record') >= 0;\n      var hasNewTextInallList = listItems.indexOf('New') >= 0;\n\n      var hasRecordInLinkList = linkItems.indexOf('Record') >= 0;\n      var doesNotHaveNewInLinkList = linkItems.indexOf('New') === -1;\n\n      assert.ok(hasRecordInallList, 'renders the right inferred name');\n      assert.ok(hasNewTextInallList, 'renders the right inferred name');\n      assert.ok(hasRecordInLinkList, 'renders the right inferred name');\n      assert.ok(doesNotHaveNewInLinkList, 'renders the right inferred name');\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/pods/components/layout');\n  QUnit.test('acceptance/pods/components/layout/md-breadcrumb-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/components/layout/md-breadcrumb-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/contact/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/contact/new');\n\n  (0, _qunit.test)('visiting /pods/contact/new', function (assert) {\n    visit('/contact/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/contact/new');\n    });\n  });\n\n  (0, _qunit.test)('test new contact initial page conditions', function (assert) {\n    assert.expect(5);\n    visit('/contact/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val().length, 36);\n      assert.equal(find('input:eq(1)').val(), \"\");\n      assert.equal(find('input:eq(2)').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new contact individual', function (assert) {\n    assert.expect(3);\n    visit('/contact/new');\n    fillIn('input:eq(1)', 'Individual Name');\n    andThen(function () {\n      assert.equal(find('input:eq(1)').val(), \"Individual Name\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact organization', function (assert) {\n    assert.expect(3);\n    visit('/contact/new');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('input:eq(2)').val(), \"Organization Name\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact organization and individual names', function (assert) {\n    assert.expect(2);\n    visit('/contact/new');\n    fillIn('input:eq(1)', 'Individual Name');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact missing contact ID', function (assert) {\n    assert.expect(2);\n    visit('/contact/new');\n    fillIn('input:eq(0)', '');\n    fillIn('input:eq(1)', 'Individual Name');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/contact/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/pods/contact');\n  QUnit.test('acceptance/pods/contact/new-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/contact/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/dictionary/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/dictionary/new');\n\n  (0, _qunit.test)('visiting /pods/dictionary/new', function (assert) {\n    visit('/dictionary/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/dictionary/new');\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary initial page conditions', function (assert) {\n    assert.expect(4);\n    visit('/dictionary/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"\");\n      assert.equal(find('div.md-form-select select').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary completed form', function (assert) {\n    assert.expect(4);\n    visit('/dictionary/new');\n    fillIn('input:eq(0)', 'Dictionary Name');\n    fillIn('div.md-form-select select', 'aggregate');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"Dictionary Name\");\n      assert.equal(find('div.md-form-select select').val(), \"aggregate\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary missing dictionary name', function (assert) {\n    assert.expect(2);\n    visit('/dictionary/new');\n    fillIn('div.md-form-select select', 'aggregate');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary missing data resource type', function (assert) {\n    assert.expect(2);\n    visit('/dictionary/new');\n    fillIn('input:eq(0)', 'Dictionary Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/dictionary/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/pods/dictionary');\n  QUnit.test('acceptance/pods/dictionary/new-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/dictionary/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/record/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/record/new');\n\n  (0, _qunit.test)('visiting /pods/record/new', function (assert) {\n    visit('/record/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/record/new');\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record initial page conditions', function (assert) {\n    assert.expect(4);\n    visit('/record/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"\");\n      assert.equal(find('div.md-form-select select').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record completed form', function (assert) {\n    assert.expect(4);\n    visit('/record/new');\n    fillIn('input:eq(0)', 'Record Title');\n    fillIn('div.md-form-select select', 'attribute');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"Record Title\");\n      assert.equal(find('div.md-form-select select').val(), \"attribute\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record missing record title', function (assert) {\n    assert.expect(2);\n    visit('/record/new');\n    fillIn('div.md-form-select select', 'attribute');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record missing data record type (scope)', function (assert) {\n    assert.expect(2);\n    visit('/record/new');\n    fillIn('input:eq(0)', 'Record Title');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/record/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/pods/record');\n  QUnit.test('acceptance/pods/record/new-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/record/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-contact\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createContact;\n\n  function createContact(total) {\n\n    var contacts = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var contact = _ember[\"default\"].Object.create({\n\n        json: {\n          \"contactId\": i,\n          \"organizationName\": null,\n          \"individualName\": \"Contact\" + i,\n          \"positionName\": null,\n          \"phoneBook\": [],\n          \"address\": {},\n          \"onlineResource\": [],\n          \"contactInstructions\": null\n        },\n        title: 'Contact' + i,\n        icon: 'user'\n      });\n\n      contacts.push(contact);\n    }\n\n    return contacts;\n  }\n});","define('mdeditor/tests/helpers/create-contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/create-contact.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-contact.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-dictionary\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createDictionary;\n\n  function createDictionary(total) {\n\n    var dictionaries = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var dictionary = _ember[\"default\"].Object.create({\n\n        json: {\n          \"dictionaryInfo\": {\n            \"citation\": {\n              \"title\": \"My Dictionary\",\n              \"date\": [{\n                \"date\": new Date().toISOString(),\n                \"dateType\": \"creation\"\n              }]\n            },\n            \"description\": \"Data dictionary.\",\n            \"resourceType\": null\n          },\n          \"domain\": [],\n          \"entity\": []\n        },\n        title: 'My Dictionary' + i,\n        icon: 'book'\n      });\n\n      dictionaries.push(dictionary);\n    }\n\n    return dictionaries;\n  }\n});","define('mdeditor/tests/helpers/create-dictionary.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/create-dictionary.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-dictionary.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-record\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createRecord;\n\n  function createRecord(total) {\n\n    var records = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var record = _ember[\"default\"].Object.create({\n\n        json: {\n          \"version\": {\n            \"name\": \"mdJson\",\n            \"version\": \"1.0.0\"\n          },\n          \"record\": [],\n          \"metadata\": {\n            \"metadataInfo\": {\n              \"metadataIdentifier\": {\n                \"identifier\": 'r' + i,\n                \"type\": \"uuid\"\n              }\n            },\n            \"resourceInfo\": {\n              \"resourceType\": null,\n              \"citation\": {\n                \"title\": \"My Record\" + i,\n                \"date\": [{\n                  \"date\": new Date().toISOString(),\n                  \"dateType\": \"creation\"\n                }]\n              },\n              \"pointOfrecord\": [],\n              \"abstract\": null,\n              \"status\": null,\n              \"language\": [\"eng; USA\"]\n            }\n          }\n        },\n        title: 'My Record' + i,\n        icon: 'project'\n      });\n\n      records.push(record);\n    }\n\n    return records;\n  }\n});","define('mdeditor/tests/helpers/create-record.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/create-record.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-record.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mdeditor/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'mdeditor/tests/helpers/start-app', 'mdeditor/tests/helpers/destroy-app'], function (exports, _qunit, _mdeditorTestsHelpersStartApp, _mdeditorTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mdeditorTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _mdeditorTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('mdeditor/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/resolver', ['exports', 'ember/resolver', 'mdeditor/config/environment'], function (exports, _emberResolver, _mdeditorConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mdeditorConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mdeditorConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mdeditor/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/start-app', ['exports', 'ember', 'mdeditor/app', 'mdeditor/config/environment'], function (exports, _ember, _mdeditorApp, _mdeditorConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _mdeditorConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _mdeditorApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mdeditor/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-boolean/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-boolean', 'Integration | Component | input/md boolean', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-boolean', [], ['value', false, 'text', 'Foo Bar', 'label', 'Baz'], ['loc', [null, [1, 0], [1, 60]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Baz|Foo|Bar|');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-boolean', [], ['value', true, 'text', 'Foo Bar', 'label', 'Baz'], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Baz|Foo|Bar|template|block|text|');\n\n    assert.ok(this.$('input').prop('checked'));\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-boolean/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-boolean');\n  QUnit.test('integration/pods/components/input/md-boolean/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-boolean/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var codelist = _ember['default'].Service.extend({\n    foobar: {\n      codelist: [{\n        code: '001',\n        codeName: 'foo',\n        description: 'This is foo.'\n      }, {\n        code: '002',\n        codeName: 'bar',\n        description: 'This is bar.'\n      }]\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('input/md-codelist', 'Integration | Component | input/md-codelist', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('service:codelist', codelist);\n      this.inject.service('codelist', {\n        as: 'codelist'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 2,\n              'column': 37\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar'], ['loc', [null, [1, 0], [2, 37]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|foo|');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('option');\n            dom.setAttribute(el1, 'value', 'baz');\n            var el2 = dom.createTextNode('baz');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar'], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|baz|foo|', 'render block ok');\n  });\n\n  (0, _emberQunit.test)('set value action', function (assert) {\n    // test dummy for the external profile action\n    this.on('update', function (actual) {\n      assert.equal(actual, 'bar', 'submitted value is passed to external action');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 36\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar', 'change', ['subexpr', 'action', ['update', 'bar'], [], ['loc', [null, [3, 11], [3, 34]]]]], ['loc', [null, [1, 0], [3, 36]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').trigger('change');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-codelist');\n  QUnit.test('integration/pods/components/input/md-codelist/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-codelist/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var codelist = _ember['default'].Service.extend({\n    foobar: {\n      codelist: [{\n        code: '001',\n        codeName: 'foo',\n        description: 'This is foo.'\n      }, {\n        code: '002',\n        codeName: 'bar',\n        description: 'This is bar.'\n      }]\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('input/md-codelist-multi', 'Integration | Component | input/md codelist multi', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('service:codelist', codelist);\n      this.inject.service('codelist', {\n        as: 'codelist'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('fooVal', ['foo', 'bar']);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist-multi', [], ['value', '[\"foo\",\"bar\"]', 'create', true, 'mdCodeName', 'foobar'], ['loc', [null, [2, 4], [5, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|×bar×foo|', 'renders with JSON string');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 7,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('p');\n            var el2 = dom.createTextNode('template block text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-codelist-multi', [], ['mdCodeName', 'foobar', 'value', ['subexpr', '@mut', [['get', 'fooVal', ['loc', [null, [4, 12], [4, 18]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [7, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|template|block|text|×bar×foo|', 'renders block with array value');\n  });\n\n  (0, _emberQunit.test)('set value action', function (assert) {\n    // test dummy for the external profile action\n    this.on('update', function (actual) {\n      assert.equal(actual, \"['bar']\", 'submitted value is passed to external action');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 40\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist-multi', [], ['create', true, 'value', '[\"foo\"]', 'mdCodeName', 'foobar', 'change', ['subexpr', 'action', ['update', '[\\'bar\\']'], [], ['loc', [null, [5, 11], [5, 38]]]]], ['loc', [null, [1, 0], [5, 40]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').trigger('change');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-codelist-multi');\n  QUnit.test('integration/pods/components/input/md-codelist-multi/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-codelist-multi/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-datetime/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-datetime', 'Integration | Component | input/md datetime', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('renders and binds', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 46\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-datetime', [], ['date', ['subexpr', '@mut', [['get', 'mydate', ['loc', [null, [2, 25], [2, 31]]]]], [], []], 'format', 'YYYY-MM-DD', 'placeholder', 'Enter date'], ['loc', [null, [1, 0], [4, 46]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.set('mydate', '1999-12-31T23:59:59.999+0900');\n    assert.equal(this.$('input').val(), '1999-12-31', 'binding works');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-datetime/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-datetime');\n  QUnit.test('integration/pods/components/input/md-datetime/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-datetime/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-input/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-input', 'Integration | Component | input/md input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-input', [], ['label', 'Foo', 'value', 'Bar', 'maxlength', 100, 'required', 'true', 'class', 'test', 'placeholder', 'Enter FooBar'], ['loc', [null, [2, 4], [8, 34]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('label').text(), 'Foo', 'labeled OK');\n\n    var input = this.$('input');\n    var props = [input.prop('required'), input.prop('maxlength'), input.val(), input.prop('placeholder'), input.hasClass('test')];\n    assert.deepEqual(props, [true, 100, 'Bar', 'Enter FooBar', true], 'properties set OK');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('p');\n            dom.setAttribute(el1, 'class', 'help-block');\n            var el2 = dom.createTextNode('help text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.help-block').text(), 'help text', 'block renders');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-input/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-input');\n  QUnit.test('integration/pods/components/input/md-input/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-input/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-inputs/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-inputs', 'Integration | Component | input/md inputs', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(3);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['Foo', 'Bar', '']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]]]], [], []], 'header', 'Header', 'placeholder', 'Enter Line', 'label', 'Lines', 'maxlength', 100], ['loc', [null, [2, 4], [7, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Lines|Add|Line|#|Header|0|Delete!|1|Delete!|2|Delete!|', 'it renders ok');\n\n    var input = this.$('input').first();\n    var props = [input.prop('maxlength'), input.val(), input.prop('placeholder')];\n    assert.deepEqual(props, [100, 'Foo', 'Enter Line'], 'properties set ok');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-inputs', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Add|Line|#|Column1|template|block|text|', 'block renders ok');\n  });\n\n  (0, _emberQunit.test)('should update items', function (assert) {\n    //assert.expect(3);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]]]], [], []]], ['loc', [null, [2, 4], [3, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('input').val(), 'foo', 'starts as foo');\n\n    this.set('model', ['bar']);\n    assert.equal(this.$('input').val(), 'bar', 'updates to bar');\n\n    this.set('model', ['bar', 'baz']);\n    assert.equal(this.$('input').length, 2, 'adds line');\n  });\n\n  (0, _emberQunit.test)('should add/delete item', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]]]], [], []]], ['loc', [null, [2, 4], [3, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-success').click();\n\n    assert.equal(this.$('input').length, 2, 'adds item');\n\n    this.$('.btn-warning').first().click();\n\n    assert.equal(this.$('input').length, 1, 'deletes item');\n  });\n\n  (0, _emberQunit.test)('add item action', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.set('addItem', function () {\n      assert.ok(true, 'addItem action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]]]], [], []], 'addItem', ['subexpr', '@mut', [['get', 'addItem', ['loc', [null, [4, 14], [4, 21]]]]], [], []]], ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-success').click();\n  });\n\n  (0, _emberQunit.test)('delete item actions', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.set('deleteItem', function (idx) {\n      assert.ok(idx > -1, 'deleteItem action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]]]], [], []], 'deleteItem', ['subexpr', '@mut', [['get', 'deleteItem', ['loc', [null, [4, 17], [4, 27]]]]], [], []]], ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-warning').first().click();\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-inputs/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-inputs');\n  QUnit.test('integration/pods/components/input/md-inputs/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-inputs/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-select', 'Integration | Component | input/md select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('objArray', [_ember['default'].Object.create({\n      id: 1,\n      name: 'foo',\n      tip: 'bar'\n    })]);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select', [], ['value', 1, 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]]]], [], []], 'valuePath', 'id', 'namePath', 'name', 'tooltipPath', 'tip', 'placeholder', 'Select one'], ['loc', [null, [2, 4], [8, 32]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|foo|', 'renders ok');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 9,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('option');\n            dom.setAttribute(el1, 'value', '2');\n            var el2 = dom.createTextNode('bar');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 10,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-select', [], ['value', 1, 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]]]], [], []], 'valuePath', 'id', 'namePath', 'name'], 0, null, ['loc', [null, [2, 4], [9, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|bar|foo|', 'renders block ok');\n  });\n\n  (0, _emberQunit.test)('set value', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('objArray', [_ember['default'].Object.create({\n      id: 1,\n      name: 'foo',\n      tip: 'bar'\n    }), _ember['default'].Object.create({\n      id: 2,\n      name: 'baz',\n      tip: 'biz'\n    })]);\n\n    this.set('val', '1');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select', [], ['value', ['subexpr', '@mut', [['get', 'val', ['loc', [null, [3, 12], [3, 15]]]]], [], []], 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]]]], [], []], 'valuePath', 'id', 'namePath', 'name'], ['loc', [null, [2, 4], [6, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').val(2).trigger('change');\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|baz|baz|', 'display value updates');\n\n    assert.equal(this.get('val'), 2, 'value is set');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-select');\n  QUnit.test('integration/pods/components/input/md-select/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-select/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select-profile/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-select-profile', 'Integration | Component | input/md select profile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 69\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select-profile', [], ['value', ['subexpr', '@mut', [['get', 'full', ['loc', [null, [1, 32], [1, 36]]]]], [], []], 'updateProfile', 'updateProfile'], ['loc', [null, [1, 0], [1, 69]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Profile|basic|full|Choose|profile|');\n  });\n\n  (0, _emberQunit.test)('should trigger external action on change', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    // test dummy for the external profile action\n    this.set('updateProfile', function (actual) {\n      assert.equal(actual, 'basic', 'submitted value is passed to external action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 75\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select-profile', [], ['value', ['subexpr', '@mut', [['get', 'full', ['loc', [null, [1, 32], [1, 36]]]]], [], []], 'updateProfile', ['subexpr', 'action', [['get', 'updateProfile', ['loc', [null, [1, 59], [1, 72]]]]], [], ['loc', [null, [1, 51], [1, 73]]]]], ['loc', [null, [1, 0], [1, 75]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // select a value and force an onchange\n    this.$('select').val('basic');\n    this.$('select').change();\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-select-profile');\n  QUnit.test('integration/pods/components/input/md-select-profile/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-select-profile/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-textarea/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-textarea', 'Integration | Component | input/md textarea', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-textarea', [], ['value', 'Foo bar baz', 'label', 'FooBar', 'placeholder', 'placeholder', 'rows', 10], ['loc', [null, [2, 4], [6, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('textarea').val(), 'Foo bar baz');\n\n    assert.equal(this.$('label').text(), 'FooBar', 'label renders');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-textarea', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text', 'block renders');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-textarea/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/input/md-textarea');\n  QUnit.test('integration/pods/components/input/md-textarea/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-textarea/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-main', 'Integration | Component | md nav main', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-main', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Toggle|navigation|Dashboard|Export|Import|Settings|');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'record/show/edit/nav', ['loc', [null, [3, 26], [3, 50]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'layout/md-nav-main', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Toggle|navigation|Dashboard|Export|Import|template|block|text|Settings|');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/layout/md-nav-main');\n  QUnit.test('integration/pods/components/layout/md-nav-main/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-main/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  //Stub profile service\n  var profileStub = _ember['default'].Service.extend({\n    getActiveProfile: function getActiveProfile() {\n      var active = this.get('active');\n      var profile = active && typeof active === 'string' ? active : 'full';\n      var profiles = this.get('profiles');\n\n      return profiles[profile];\n    },\n    profiles: {\n      full: {\n        profile: null,\n        secondaryNav: [{\n          title: 'Foo',\n          target: 'record.show.edit.index'\n\n        }, {\n          title: 'Bar',\n          target: 'record.show.edit.metadata'\n\n        }]\n      },\n      basic: {\n        profile: null,\n        secondaryNav: [{\n          title: 'FooBar',\n          target: 'record.show.edit.index'\n\n        }, {\n          title: 'BarFoo',\n          target: 'record.show.edit.metadata'\n\n        }]\n      }\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-secondary', 'Integration | Component | md nav secondary', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:profile', profileStub);\n      // Calling inject puts the service instance in the test's context,\n      // making it accessible as \"locationService\" within each test\n      this.inject.service('profile', {\n        as: 'profileService'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-secondary', ['loc', [null, [1, 0], [1, 27]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|Foo|Bar|');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('li');\n            var el2 = dom.createTextNode('template block text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'layout/md-nav-secondary', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|Foo|Bar|template|block|text|');\n  });\n\n  (0, _emberQunit.test)('render after setting profile', function (assert) {\n    assert.expect(1);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('profileService.active', 'basic');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-secondary', ['loc', [null, [1, 0], [1, 27]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|FooBar|BarFoo|');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/layout/md-nav-secondary');\n  QUnit.test('integration/pods/components/layout/md-nav-secondary/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-secondary/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-contact', 'mdeditor/tests/helpers/create-record', 'mdeditor/tests/helpers/create-dictionary'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateContact, _mdeditorTestsHelpersCreateRecord, _mdeditorTestsHelpersCreateDictionary) {\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-sidebar', 'Integration | Component | md nav sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(1);\n\n    var contacts = (0, _mdeditorTestsHelpersCreateContact['default'])(2);\n    contacts.meta = {\n      type: 'contact',\n      list: 'contacts',\n      title: 'Contacts'\n    };\n\n    var records = (0, _mdeditorTestsHelpersCreateRecord['default'])(2);\n    records.meta = {\n      type: 'record',\n      list: 'records',\n      title: 'Records'\n    };\n\n    var dicts = (0, _mdeditorTestsHelpersCreateDictionary['default'])(2);\n    dicts.meta = {\n      type: 'dictionary',\n      list: 'dictionaries',\n      title: 'Dictionaries'\n    };\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('model', [records, contacts, dicts]);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 37\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layout/md-nav-sidebar', [], ['items', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [1, 30], [1, 35]]]]], [], []]], ['loc', [null, [1, 0], [1, 37]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|mdditor|Records|(2)|My|Record0|My|Record1|Contacts|(2)|Contact0|Contact1|Dictionaries|(2)|My|Dictionary0|My|Dictionary1|');\n  });\n\n  (0, _emberQunit.test)('toggle help action', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'triple-curlies'\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'md-sidebar-wrapper');\n          var el2 = dom.createComment('');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-sidebar', ['loc', [null, [1, 29], [1, 54]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    this.$('#md-btn-help').click();\n    assert.ok(this.$('#md-sidebar-wrapper').hasClass('help'));\n  });\n\n  (0, _emberQunit.test)('toggle sidebar action', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'triple-curlies'\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 87\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'md-wrapper');\n          var el2 = dom.createElement('div');\n          dom.setAttribute(el2, 'id', 'md-sidebar-wrapper');\n          var el3 = dom.createComment('');\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-sidebar', ['loc', [null, [1, 50], [1, 75]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    this.$('.sidebar-brand-link').click();\n    assert.ok(this.$('#md-wrapper').hasClass('toggled'));\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/layout/md-nav-sidebar');\n  QUnit.test('integration/pods/components/layout/md-nav-sidebar/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-sidebar/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/md-help/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('md-help', 'Integration | Component | md help', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'md-help', ['loc', [null, [1, 0], [1, 11]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$().text().indexOf('Lorem ipsum' > 0));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'md-help', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(this.$().text().trim().indexOf('template block text' > 0));\n  });\n});","define('mdeditor/tests/integration/pods/components/md-help/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/pods/components/md-help');\n  QUnit.test('integration/pods/components/md-help/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/md-help/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/contact.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/contact.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/dictionary.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/dictionary.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/dictionary.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/record.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/record.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/record.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-boolean/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-boolean');\n  QUnit.test('pods/components/input/md-boolean/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-boolean/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-codelist/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-codelist');\n  QUnit.test('pods/components/input/md-codelist/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-codelist/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-codelist-multi/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-codelist-multi');\n  QUnit.test('pods/components/input/md-codelist-multi/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-codelist-multi/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-datetime/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-datetime');\n  QUnit.test('pods/components/input/md-datetime/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-datetime/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-input/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-input');\n  QUnit.test('pods/components/input/md-input/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-input/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-inputs/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-inputs');\n  QUnit.test('pods/components/input/md-inputs/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-inputs/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-select/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-select');\n  QUnit.test('pods/components/input/md-select/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-select/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-select-profile/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-select-profile');\n  QUnit.test('pods/components/input/md-select-profile/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-select-profile/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-textarea/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/input/md-textarea');\n  QUnit.test('pods/components/input/md-textarea/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-textarea/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-breadcrumb/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/layout/md-breadcrumb');\n  QUnit.test('pods/components/layout/md-breadcrumb/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-breadcrumb/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-main/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/layout/md-nav-main');\n  QUnit.test('pods/components/layout/md-nav-main/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-main/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-secondary/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/layout/md-nav-secondary');\n  QUnit.test('pods/components/layout/md-nav-secondary/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-secondary/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-sidebar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/layout/md-nav-sidebar');\n  QUnit.test('pods/components/layout/md-nav-sidebar/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-sidebar/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/md-help/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/components/md-help');\n  QUnit.test('pods/components/md-help/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/md-help/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/contact/new');\n  QUnit.test('pods/contact/new/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/contact');\n  QUnit.test('pods/contact/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/contact/show/edit');\n  QUnit.test('pods/contact/show/edit/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/contact/show');\n  QUnit.test('pods/contact/show/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contacts/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/contacts');\n  QUnit.test('pods/contacts/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contacts/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dashboard/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dashboard');\n  QUnit.test('pods/dashboard/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dashboard/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionaries/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionaries');\n  QUnit.test('pods/dictionaries/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionaries/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/new');\n  QUnit.test('pods/dictionary/new/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary');\n  QUnit.test('pods/dictionary/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/domains/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/show/edit/domains');\n  QUnit.test('pods/dictionary/show/edit/domains/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/domains/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/entities/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/show/edit/entities');\n  QUnit.test('pods/dictionary/show/edit/entities/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/entities/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/show/edit/index');\n  QUnit.test('pods/dictionary/show/edit/index/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/index/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/show/edit');\n  QUnit.test('pods/dictionary/show/edit/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/dictionary/show');\n  QUnit.test('pods/dictionary/show/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/export/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/export');\n  QUnit.test('pods/export/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/export/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/help/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/help');\n  QUnit.test('pods/help/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/help/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/import/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/import');\n  QUnit.test('pods/import/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/import/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/publish/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/publish');\n  QUnit.test('pods/publish/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/publish/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/new');\n  QUnit.test('pods/record/new/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/associated/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/associated');\n  QUnit.test('pods/record/show/edit/associated/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/associated/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/coverages/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/coverages');\n  QUnit.test('pods/record/show/edit/coverages/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/coverages/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/distribution/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/distribution');\n  QUnit.test('pods/record/show/edit/distribution/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/distribution/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/documents/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/documents');\n  QUnit.test('pods/record/show/edit/documents/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/documents/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/grid/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/grid');\n  QUnit.test('pods/record/show/edit/grid/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/grid/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/index');\n  QUnit.test('pods/record/show/edit/index/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/index/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/keywords/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/keywords');\n  QUnit.test('pods/record/show/edit/keywords/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/keywords/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/metadata/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/metadata');\n  QUnit.test('pods/record/show/edit/metadata/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/metadata/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/quality/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/quality');\n  QUnit.test('pods/record/show/edit/quality/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/quality/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit');\n  QUnit.test('pods/record/show/edit/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/spatial/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show/edit/spatial');\n  QUnit.test('pods/record/show/edit/spatial/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/spatial/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/record/show');\n  QUnit.test('pods/record/show/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/records/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/records');\n  QUnit.test('pods/records/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/records/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/save/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/save');\n  QUnit.test('pods/save/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/save/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/settings/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/settings');\n  QUnit.test('pods/settings/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/settings/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/translate/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - pods/translate');\n  QUnit.test('pods/translate/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/translate/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mdeditor/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/index.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('mdeditor/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/codelist.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/codelist.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/codelist.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/icon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/icon.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/icon.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/profile.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/profile.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/profile.js should pass jshint.');\n  });\n});","define('mdeditor/tests/test-helper', ['exports', 'mdeditor/tests/helpers/resolver', 'ember-qunit'], function (exports, _mdeditorTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mdeditorTestsHelpersResolver['default']);\n});","define('mdeditor/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mdeditor/tests/transforms/json.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms');\n  QUnit.test('transforms/json.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/json.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  (0, _emberQunit.test)('it has a importData method', function (assert) {\n    var adapter = this.subject();\n    assert.ok(typeof adapter.importData === 'function');\n  });\n\n  (0, _emberQunit.test)('it has a exportData method', function (assert) {\n    var adapter = this.subject();\n    assert.ok(typeof adapter.exportData === 'function');\n  });\n});","define('mdeditor/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('contact', 'Unit | Model | contact', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(2);\n    me.set('json.individualName', undefined);\n    me.set('json.organizationName', 'bar');\n    assert.equal(me.get('title'), 'bar');\n    me.set('json.individualName', 'foo');\n    assert.equal(me.get('title'), 'foo');\n  });\n\n  (0, _emberQunit.test)('should correctly compute icon', function (assert) {\n    var me = this.subject();\n\n    assert.expect(2);\n    me.set('json.individualName', undefined);\n    me.set('json.organizationName', 'bar');\n    assert.equal(me.get('icon'), 'users');\n    me.set('json.individualName', 'foo');\n    assert.equal(me.get('icon'), 'user');\n  });\n});","define('mdeditor/tests/unit/models/contact-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/contact-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/contact-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/dictionary-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('dictionary', 'Unit | Model | dictionary', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(1);\n    me.set('json.dictionaryInfo.citation.title', 'bar');\n    assert.equal(me.get('title'), 'bar');\n  });\n});","define('mdeditor/tests/unit/models/dictionary-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/dictionary-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/dictionary-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/record-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('record', 'Unit | Model | record', {\n    // Specify the other units that are required for this test.\n    needs: ['service:icon']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(1);\n    me.set('json.metadata.resourceInfo.citation.title', 'foo');\n    assert.equal(me.get('title'), 'foo');\n  });\n\n  (0, _emberQunit.test)('should correctly compute icon', function (assert) {\n    var me = this.subject();\n    var list = _ember['default'].getOwner(this).lookup('service:icon');\n\n    assert.expect(1);\n    me.set('json.metadata.resourceInfo.resourceType', 'project');\n    assert.equal(me.get('icon'), list.get('project'));\n  });\n});","define('mdeditor/tests/unit/models/record-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/record-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/record-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/new', 'Unit | Route | contact/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/contact/new');\n  QUnit.test('unit/pods/contact/new/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/show/edit', 'Unit | Route | contact/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/contact/show/edit');\n  QUnit.test('unit/pods/contact/show/edit/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/show', 'Unit | Route | contact/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/contact/show');\n  QUnit.test('unit/pods/contact/show/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contacts/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:contacts', 'Unit | Route | contacts', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('should display a confirm', function (assert) {\n    assert.expect(2);\n\n    var route = this.subject();\n\n    // test _deleteItem to displays the expected window.confirm message\n    var expectedTextFoo = 'foo';\n    window.confirm = function (message) {\n      assert.equal(message, expectedTextFoo, 'expect confirm to display ${expectedTextFoo}');\n    };\n    route._deleteItem(0, expectedTextFoo);\n\n    // test action deleteItem calls _deleteItem and displays a window.confirm\n    window.confirm = function (message) {\n      assert.ok(message, 'expect confirm to display a message');\n    };\n    route.send('deleteItem', 0);\n  });\n});","define('mdeditor/tests/unit/pods/contacts/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/contacts');\n  QUnit.test('unit/pods/contacts/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contacts/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dashboard/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dashboard/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dashboard');\n  QUnit.test('unit/pods/dashboard/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dashboard/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionaries/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:dictionaries', 'Unit | Route | dictionaries', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('should display a confirm', function (assert) {\n    assert.expect(2);\n\n    var route = this.subject();\n\n    // test _deleteItem to displays the expected window.confirm message\n    var expectedTextFoo = 'foo';\n    window.confirm = function (message) {\n      assert.equal(message, expectedTextFoo, 'expect confirm to display ${expectedTextFoo}');\n    };\n    route._deleteItem(0, expectedTextFoo);\n\n    // test action deleteItem calls _deleteItem and displays a window.confirm\n    window.confirm = function (message) {\n      assert.ok(message, 'expect confirm to display a message');\n    };\n    route.send('deleteItem', 0);\n  });\n});","define('mdeditor/tests/unit/pods/dictionaries/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionaries');\n  QUnit.test('unit/pods/dictionaries/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionaries/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/new', 'Unit | Route | dictionary/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/new');\n  QUnit.test('unit/pods/dictionary/new/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/domains', 'Unit | Route | dictionary/edit/domains', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/show/edit/domains');\n  QUnit.test('unit/pods/dictionary/show/edit/domains/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/domains/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/entities', 'Unit | Route | dictionary/edit/entities', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/show/edit/entities');\n  QUnit.test('unit/pods/dictionary/show/edit/entities/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/entities/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/index', 'Unit | Route | dictionary/show/edit/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/show/edit/index');\n  QUnit.test('unit/pods/dictionary/show/edit/index/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/index/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit', 'Unit | Route | dictionary/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/show/edit');\n  QUnit.test('unit/pods/dictionary/show/edit/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show', 'Unit | Route | dictionary/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/dictionary/show');\n  QUnit.test('unit/pods/dictionary/show/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/export/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:save', 'Unit | Route | save', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/export/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/export');\n  QUnit.test('unit/pods/export/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/export/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/help/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:help', 'Unit | Route | help', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/help/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/help');\n  QUnit.test('unit/pods/help/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/help/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/import/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:import', 'Unit | Route | import', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/import/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/import');\n  QUnit.test('unit/pods/import/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/import/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/publish/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:publish', 'Unit | Route | publish', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/publish/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/publish');\n  QUnit.test('unit/pods/publish/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/publish/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/new', 'Unit | Route | record/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/new');\n  QUnit.test('unit/pods/record/new/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/associated/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/associated', 'Unit | Route | record/edit/associated', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/associated/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/associated');\n  QUnit.test('unit/pods/record/show/edit/associated/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/associated/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/coverages/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/coverages', 'Unit | Route | record/edit/coverages', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/coverages');\n  QUnit.test('unit/pods/record/show/edit/coverages/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/coverages/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/distribution/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/distribution', 'Unit | Route | record/edit/distribution', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/distribution');\n  QUnit.test('unit/pods/record/show/edit/distribution/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/distribution/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/documents/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/documents', 'Unit | Route | record/edit/documents', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/documents/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/documents');\n  QUnit.test('unit/pods/record/show/edit/documents/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/documents/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/grid/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/grid', 'Unit | Route | record/edit/grid', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/grid/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/grid');\n  QUnit.test('unit/pods/record/show/edit/grid/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/grid/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/index', 'Unit | Route | record/show/edit/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/index');\n  QUnit.test('unit/pods/record/show/edit/index/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/index/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/keywords/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/keywords', 'Unit | Route | record/edit/keywords', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/keywords');\n  QUnit.test('unit/pods/record/show/edit/keywords/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/keywords/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/metadata/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/metadata', 'Unit | Route | record/show/edit/metadata', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/metadata');\n  QUnit.test('unit/pods/record/show/edit/metadata/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/metadata/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/quality/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/quality', 'Unit | Route | record/edit/quality', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/quality/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/quality');\n  QUnit.test('unit/pods/record/show/edit/quality/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/quality/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit', 'Unit | Route | record/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit');\n  QUnit.test('unit/pods/record/show/edit/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/spatial/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/spatial', 'Unit | Route | record/edit/spatial', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show/edit/spatial');\n  QUnit.test('unit/pods/record/show/edit/spatial/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/spatial/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show', 'Unit | Route | record/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/record/show');\n  QUnit.test('unit/pods/record/show/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/records/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:records', 'Unit | Route | records', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('should display a confirm', function (assert) {\n    assert.expect(2);\n\n    var route = this.subject();\n\n    // test _deleteItem to displays the expected window.confirm message\n    var expectedTextFoo = 'foo';\n    window.confirm = function (message) {\n      assert.equal(message, expectedTextFoo, 'expect confirm to display ${expectedTextFoo}');\n    };\n    route._deleteItem(0, expectedTextFoo);\n\n    // test action deleteItem calls _deleteItem and displays a window.confirm\n    window.confirm = function (message) {\n      assert.ok(message, 'expect confirm to display a message');\n    };\n    route.send('deleteItem', 0);\n  });\n});","define('mdeditor/tests/unit/pods/records/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/records');\n  QUnit.test('unit/pods/records/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/records/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/settings/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:settings', 'Unit | Route | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/settings/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/settings');\n  QUnit.test('unit/pods/settings/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/settings/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/translate/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:translate', 'Unit | Route | translate', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/translate/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/pods/translate');\n  QUnit.test('unit/pods/translate/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/translate/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/index-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/serializers/application-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('serializer:application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['transform:json']\n  });\n\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    assert.expect(2);\n\n    var getOwner = _ember['default'].getOwner;\n\n    var serializer = this.subject();\n    var store = getOwner(this).lookup('service:store');\n    var record = undefined;\n    var expected = {\n      \"data\": {\n        \"attributes\": {\n          \"name\": \"foo\",\n          \"skill\": \"bar\",\n          \"games-played\": \"[100,200]\"\n        },\n        \"type\": \"tests\"\n      }\n    };\n    var data = {\n      id: 1,\n      name: 'foo',\n      skill: 'bar',\n      gamesPlayed: [100, 200]\n    };\n    var model = DS.Model.extend({\n      name: DS.attr(),\n      skill: DS.attr(),\n      gamesPlayed: DS.attr('json')\n    });\n\n    this.register('model:test', model);\n\n    _ember['default'].run(function () {\n      record = store.createRecord('test', data);\n    });\n\n    assert.deepEqual(record.serialize(), expected, 'record serialized OK');\n    assert.deepEqual(serializer.serialize(record._createSnapshot()), expected, 'serialized snapshot OK');\n  });\n});","define('mdeditor/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/codelist-test', ['exports', 'ember-qunit', 'npm:mdcodes/resources/js/mdcodes.js'], function (exports, _emberQunit, _npmMdcodesResourcesJsMdcodesJs) {\n\n  (0, _emberQunit.moduleFor)('service:codelist', 'Unit | Service | codelist', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  (0, _emberQunit.test)('all codelists are present', function (assert) {\n    var service = this.subject();\n\n    Object.keys(_npmMdcodesResourcesJsMdcodesJs['default']).forEach(function (key) {\n      var name = key.replace(/^iso_/, '');\n\n      assert.ok(service.get(name), name + ' is present.');\n    });\n  });\n});","define('mdeditor/tests/unit/services/codelist-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/codelist-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/codelist-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/icon-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:icon', 'Unit | Service | icon', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mdeditor/tests/unit/services/icon-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/icon-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/icon-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/profile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:profile', 'Unit | Service | profile', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mdeditor/tests/unit/services/profile-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/profile-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/profile-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/transforms/json-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:json', 'Unit | Transform | json', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  (0, _emberQunit.test)('it deserialized', function (assert) {\n    var transform = this.subject();\n    assert.deepEqual(transform.deserialize('{\"foo\":\"bar\"}'), {\n      foo: \"bar\"\n    });\n  });\n\n  (0, _emberQunit.test)('it serialized', function (assert) {\n    var transform = this.subject();\n    assert.equal(transform.serialize({\n      foo: 'bar'\n    }), '{\"foo\":\"bar\"}');\n  });\n});","define('mdeditor/tests/unit/transforms/json-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/transforms');\n  QUnit.test('unit/transforms/json-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/json-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mdeditor/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxxjlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}