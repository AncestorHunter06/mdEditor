{"version":3,"sources":["mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.js","mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.jshint.js","mdeditor/tests/acceptance/pods/contact/new-test.js","mdeditor/tests/acceptance/pods/contact/new-test.jshint.js","mdeditor/tests/acceptance/pods/contacts/contacts-test.js","mdeditor/tests/acceptance/pods/contacts/contacts-test.jshint.js","mdeditor/tests/acceptance/pods/dictionary/new-test.js","mdeditor/tests/acceptance/pods/dictionary/new-test.jshint.js","mdeditor/tests/acceptance/pods/record/new-test.js","mdeditor/tests/acceptance/pods/record/new-test.jshint.js","mdeditor/tests/adapters/application.jshint.js","mdeditor/tests/app.jshint.js","mdeditor/tests/helpers/add-em.jshint.js","mdeditor/tests/helpers/create-contact.js","mdeditor/tests/helpers/create-contact.jshint.js","mdeditor/tests/helpers/create-dictionary.js","mdeditor/tests/helpers/create-dictionary.jshint.js","mdeditor/tests/helpers/create-map-layer.js","mdeditor/tests/helpers/create-map-layer.jshint.js","mdeditor/tests/helpers/create-record.js","mdeditor/tests/helpers/create-record.jshint.js","mdeditor/tests/helpers/destroy-app.js","mdeditor/tests/helpers/destroy-app.jshint.js","mdeditor/tests/helpers/ember-cli-file-picker.js","mdeditor/tests/helpers/flash-message.js","mdeditor/tests/helpers/flash-message.jshint.js","mdeditor/tests/helpers/get-property.jshint.js","mdeditor/tests/helpers/modal-asserts.js","mdeditor/tests/helpers/modal-asserts.jshint.js","mdeditor/tests/helpers/module-for-acceptance.js","mdeditor/tests/helpers/module-for-acceptance.jshint.js","mdeditor/tests/helpers/resolver.js","mdeditor/tests/helpers/resolver.jshint.js","mdeditor/tests/helpers/start-app.js","mdeditor/tests/helpers/start-app.jshint.js","mdeditor/tests/helpers/uc-words.jshint.js","mdeditor/tests/initializers/leaflet.jshint.js","mdeditor/tests/instance-initializers/settings.jshint.js","mdeditor/tests/integration/components/feature-form-test.js","mdeditor/tests/integration/components/feature-form-test.jshint.js","mdeditor/tests/integration/components/feature-group-test.js","mdeditor/tests/integration/components/feature-group-test.jshint.js","mdeditor/tests/integration/components/feature-table-test.js","mdeditor/tests/integration/components/feature-table-test.jshint.js","mdeditor/tests/integration/components/geojson-layer-test.js","mdeditor/tests/integration/components/geojson-layer-test.jshint.js","mdeditor/tests/integration/components/leaflet-draw-test.js","mdeditor/tests/integration/components/leaflet-draw-test.jshint.js","mdeditor/tests/integration/components/leaflet-table-test.js","mdeditor/tests/integration/components/leaflet-table-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-button-confirm/component-test.js","mdeditor/tests/integration/pods/components/control/md-button-confirm/component-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-button-modal/component-test.js","mdeditor/tests/integration/pods/components/control/md-button-modal/component-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-crud-buttons/component-test.js","mdeditor/tests/integration/pods/components/control/md-crud-buttons/component-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-json-button/component-test.js","mdeditor/tests/integration/pods/components/control/md-json-button/component-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-json-viewer/component-test.js","mdeditor/tests/integration/pods/components/control/md-json-viewer/component-test.jshint.js","mdeditor/tests/integration/pods/components/control/md-modal/component-test.js","mdeditor/tests/integration/pods/components/control/md-modal/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-boolean/component-test.js","mdeditor/tests/integration/pods/components/input/md-boolean/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.js","mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-codelist/component-test.js","mdeditor/tests/integration/pods/components/input/md-codelist/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-datetime/component-test.js","mdeditor/tests/integration/pods/components/input/md-datetime/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-input/component-test.js","mdeditor/tests/integration/pods/components/input/md-input/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-inputs/component-test.js","mdeditor/tests/integration/pods/components/input/md-inputs/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.js","mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-select/component-test.js","mdeditor/tests/integration/pods/components/input/md-select/component-test.jshint.js","mdeditor/tests/integration/pods/components/input/md-textarea/component-test.js","mdeditor/tests/integration/pods/components/input/md-textarea/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.jshint.js","mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.js","mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.jshint.js","mdeditor/tests/integration/pods/components/md-help/component-test.js","mdeditor/tests/integration/pods/components/md-help/component-test.jshint.js","mdeditor/tests/models/contact.jshint.js","mdeditor/tests/models/dictionary.jshint.js","mdeditor/tests/models/record.jshint.js","mdeditor/tests/models/setting.jshint.js","mdeditor/tests/pods/components/control/md-button-confirm/component.jshint.js","mdeditor/tests/pods/components/control/md-button-modal/component.jshint.js","mdeditor/tests/pods/components/control/md-crud-buttons/component.jshint.js","mdeditor/tests/pods/components/control/md-json-button/component.jshint.js","mdeditor/tests/pods/components/control/md-json-viewer/component.jshint.js","mdeditor/tests/pods/components/control/md-modal/component.jshint.js","mdeditor/tests/pods/components/input/md-boolean/component.jshint.js","mdeditor/tests/pods/components/input/md-codelist-multi/component.jshint.js","mdeditor/tests/pods/components/input/md-codelist/component.jshint.js","mdeditor/tests/pods/components/input/md-datetime/component.jshint.js","mdeditor/tests/pods/components/input/md-input/component.jshint.js","mdeditor/tests/pods/components/input/md-inputs/component.jshint.js","mdeditor/tests/pods/components/input/md-select-profile/component.jshint.js","mdeditor/tests/pods/components/input/md-select/component.jshint.js","mdeditor/tests/pods/components/input/md-textarea/component.jshint.js","mdeditor/tests/pods/components/layout/md-breadcrumb/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-main/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-secondary/component.jshint.js","mdeditor/tests/pods/components/layout/md-nav-sidebar/component.jshint.js","mdeditor/tests/pods/components/md-help/component.jshint.js","mdeditor/tests/pods/components/object/md-address/component.jshint.js","mdeditor/tests/pods/components/object/md-object-table/component.jshint.js","mdeditor/tests/pods/components/object/md-online-resource-array/component.jshint.js","mdeditor/tests/pods/components/object/md-phone-array/component.jshint.js","mdeditor/tests/pods/contact/new/route.jshint.js","mdeditor/tests/pods/contact/route.jshint.js","mdeditor/tests/pods/contact/show/edit/route.jshint.js","mdeditor/tests/pods/contact/show/route.jshint.js","mdeditor/tests/pods/contacts/route.jshint.js","mdeditor/tests/pods/dashboard/route.jshint.js","mdeditor/tests/pods/dictionaries/route.jshint.js","mdeditor/tests/pods/dictionary/new/route.jshint.js","mdeditor/tests/pods/dictionary/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/domains/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/entities/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/index/route.jshint.js","mdeditor/tests/pods/dictionary/show/edit/route.jshint.js","mdeditor/tests/pods/dictionary/show/route.jshint.js","mdeditor/tests/pods/export/route.jshint.js","mdeditor/tests/pods/help/route.jshint.js","mdeditor/tests/pods/import/route.jshint.js","mdeditor/tests/pods/publish/route.jshint.js","mdeditor/tests/pods/record/new/route.jshint.js","mdeditor/tests/pods/record/route.jshint.js","mdeditor/tests/pods/record/show/edit/associated/route.jshint.js","mdeditor/tests/pods/record/show/edit/coverages/route.jshint.js","mdeditor/tests/pods/record/show/edit/distribution/route.jshint.js","mdeditor/tests/pods/record/show/edit/documents/route.jshint.js","mdeditor/tests/pods/record/show/edit/grid/route.jshint.js","mdeditor/tests/pods/record/show/edit/index/route.jshint.js","mdeditor/tests/pods/record/show/edit/keywords/route.jshint.js","mdeditor/tests/pods/record/show/edit/metadata/route.jshint.js","mdeditor/tests/pods/record/show/edit/quality/route.jshint.js","mdeditor/tests/pods/record/show/edit/route.jshint.js","mdeditor/tests/pods/record/show/edit/spatial/route.jshint.js","mdeditor/tests/pods/record/show/route.jshint.js","mdeditor/tests/pods/records/route.jshint.js","mdeditor/tests/pods/save/route.jshint.js","mdeditor/tests/pods/settings/route.jshint.js","mdeditor/tests/pods/translate/route.jshint.js","mdeditor/tests/resolver.jshint.js","mdeditor/tests/router.jshint.js","mdeditor/tests/routes/application.jshint.js","mdeditor/tests/routes/index.jshint.js","mdeditor/tests/serializers/application.jshint.js","mdeditor/tests/services/codelist.jshint.js","mdeditor/tests/services/icon.jshint.js","mdeditor/tests/services/jsonvalidator.jshint.js","mdeditor/tests/services/profile.jshint.js","mdeditor/tests/services/settings.jshint.js","mdeditor/tests/test-helper.js","mdeditor/tests/test-helper.jshint.js","mdeditor/tests/transforms/json.jshint.js","mdeditor/tests/unit/adapters/application-test.js","mdeditor/tests/unit/adapters/application-test.jshint.js","mdeditor/tests/unit/initializers/leaflet-test.js","mdeditor/tests/unit/initializers/leaflet-test.jshint.js","mdeditor/tests/unit/instance-initializers/settings-test.js","mdeditor/tests/unit/instance-initializers/settings-test.jshint.js","mdeditor/tests/unit/models/contact-test.js","mdeditor/tests/unit/models/contact-test.jshint.js","mdeditor/tests/unit/models/dictionary-test.js","mdeditor/tests/unit/models/dictionary-test.jshint.js","mdeditor/tests/unit/models/record-test.js","mdeditor/tests/unit/models/record-test.jshint.js","mdeditor/tests/unit/models/setting-test.js","mdeditor/tests/unit/models/setting-test.jshint.js","mdeditor/tests/unit/pods/contact/new/route-test.js","mdeditor/tests/unit/pods/contact/new/route-test.jshint.js","mdeditor/tests/unit/pods/contact/show/edit/route-test.js","mdeditor/tests/unit/pods/contact/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/contact/show/route-test.js","mdeditor/tests/unit/pods/contact/show/route-test.jshint.js","mdeditor/tests/unit/pods/contacts/route-test.js","mdeditor/tests/unit/pods/contacts/route-test.jshint.js","mdeditor/tests/unit/pods/dashboard/route-test.js","mdeditor/tests/unit/pods/dashboard/route-test.jshint.js","mdeditor/tests/unit/pods/dictionaries/route-test.js","mdeditor/tests/unit/pods/dictionaries/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/new/route-test.js","mdeditor/tests/unit/pods/dictionary/new/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/edit/route-test.js","mdeditor/tests/unit/pods/dictionary/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/dictionary/show/route-test.js","mdeditor/tests/unit/pods/dictionary/show/route-test.jshint.js","mdeditor/tests/unit/pods/export/route-test.js","mdeditor/tests/unit/pods/export/route-test.jshint.js","mdeditor/tests/unit/pods/help/route-test.js","mdeditor/tests/unit/pods/help/route-test.jshint.js","mdeditor/tests/unit/pods/import/route-test.js","mdeditor/tests/unit/pods/import/route-test.jshint.js","mdeditor/tests/unit/pods/publish/route-test.js","mdeditor/tests/unit/pods/publish/route-test.jshint.js","mdeditor/tests/unit/pods/record/new/route-test.js","mdeditor/tests/unit/pods/record/new/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/associated/route-test.js","mdeditor/tests/unit/pods/record/show/edit/associated/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.js","mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.js","mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/documents/route-test.js","mdeditor/tests/unit/pods/record/show/edit/documents/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/grid/route-test.js","mdeditor/tests/unit/pods/record/show/edit/grid/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/index/route-test.js","mdeditor/tests/unit/pods/record/show/edit/index/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.js","mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.js","mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/quality/route-test.js","mdeditor/tests/unit/pods/record/show/edit/quality/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/route-test.js","mdeditor/tests/unit/pods/record/show/edit/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.js","mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.jshint.js","mdeditor/tests/unit/pods/record/show/route-test.js","mdeditor/tests/unit/pods/record/show/route-test.jshint.js","mdeditor/tests/unit/pods/records/route-test.js","mdeditor/tests/unit/pods/records/route-test.jshint.js","mdeditor/tests/unit/pods/settings/route-test.js","mdeditor/tests/unit/pods/settings/route-test.jshint.js","mdeditor/tests/unit/pods/translate/route-test.js","mdeditor/tests/unit/pods/translate/route-test.jshint.js","mdeditor/tests/unit/routes/application-test.js","mdeditor/tests/unit/routes/application-test.jshint.js","mdeditor/tests/unit/routes/index-test.js","mdeditor/tests/unit/routes/index-test.jshint.js","mdeditor/tests/unit/serializers/application-test.js","mdeditor/tests/unit/serializers/application-test.jshint.js","mdeditor/tests/unit/services/codelist-test.js","mdeditor/tests/unit/services/codelist-test.jshint.js","mdeditor/tests/unit/services/icon-test.js","mdeditor/tests/unit/services/icon-test.jshint.js","mdeditor/tests/unit/services/jsonvalidator-test.js","mdeditor/tests/unit/services/jsonvalidator-test.jshint.js","mdeditor/tests/unit/services/profile-test.js","mdeditor/tests/unit/services/profile-test.jshint.js","mdeditor/tests/unit/services/settings-test.js","mdeditor/tests/unit/services/settings-test.jshint.js","mdeditor/tests/unit/transforms/json-test.js","mdeditor/tests/unit/transforms/json-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  var componentInstance = undefined;\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/components/md breadcrumb', {\n    beforeEach: function beforeEach() {\n      componentInstance = this.application.__container__.lookup('component:layout/md-breadcrumb');\n    },\n    afterEach: function afterEach() {\n      componentInstance = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /record/new', function (assert) {\n    assert.expect(5);\n\n    visit('/record/new');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/record/new');\n\n      var listItems = find('ol.breadcrumb li').text();\n      var linkItems = find('ol.breadcrumb li a').text();\n\n      var hasRecordInallList = listItems.indexOf('Record') >= 0;\n      var hasNewTextInallList = listItems.indexOf('New') >= 0;\n\n      var doesNotHaveRecordInLinkList = linkItems.indexOf('Record') === -1;\n      var doesNotHaveNewInLinkList = linkItems.indexOf('New') === -1;\n\n      assert.ok(hasRecordInallList, 'renders the right inferred name');\n      assert.ok(hasNewTextInallList, 'renders the right inferred name');\n      assert.ok(doesNotHaveRecordInLinkList, 'renders the right inferred name');\n      assert.ok(doesNotHaveNewInLinkList, 'renders the right inferred name');\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/components/layout/md-breadcrumb-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/pods/components/layout/md-breadcrumb-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/components/layout/md-breadcrumb-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/contact/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/contact/new');\n\n  (0, _qunit.test)('visiting /pods/contact/new', function (assert) {\n    visit('/contact/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/contact/new');\n    });\n  });\n\n  (0, _qunit.test)('test new contact initial page conditions', function (assert) {\n    assert.expect(5);\n    visit('/contact/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val().length, 36);\n      assert.equal(find('input:eq(1)').val(), \"\");\n      assert.equal(find('input:eq(2)').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new contact individual', function (assert) {\n    assert.expect(3);\n    visit('/contact/new');\n    fillIn('input:eq(1)', 'Individual Name');\n    andThen(function () {\n      assert.equal(find('input:eq(1)').val(), \"Individual Name\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact organization', function (assert) {\n    assert.expect(3);\n    visit('/contact/new');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('input:eq(2)').val(), \"Organization Name\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact organization and individual names', function (assert) {\n    assert.expect(2);\n    visit('/contact/new');\n    fillIn('input:eq(1)', 'Individual Name');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new contact missing contact ID', function (assert) {\n    assert.expect(2);\n    visit('/contact/new');\n    fillIn('input:eq(0)', '');\n    fillIn('input:eq(1)', 'Individual Name');\n    fillIn('input:eq(2)', 'Organization Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/contact/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/pods/contact/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/contact/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/contacts/contacts-test', ['exports', 'ember', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _ember, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/contacts');\n\n  (0, _qunit.test)('visiting /contacts', function (assert) {\n    visit('/contacts');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/contacts');\n    });\n  });\n\n  (0, _qunit.test)('delete should display a confirm', function (assert) {\n    assert.expect(4);\n\n    var store = this.application.__container__.lookup('service:store');\n\n    //make sure there's at least one record visible\n    _ember['default'].run(function () {\n      store.createRecord('contact');\n    });\n\n    visit('/contacts');\n\n    assert.dialogOpensAndCloses({\n      openSelector: 'button.md-button-modal.btn-danger:first',\n      closeSelector: '.md-modal-overlay button.btn-primary',\n      hasOverlay: true\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/contacts/contacts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/pods/contacts/contacts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/contacts/contacts-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/dictionary/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/dictionary/new');\n\n  (0, _qunit.test)('visiting /pods/dictionary/new', function (assert) {\n    visit('/dictionary/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/dictionary/new');\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary initial page conditions', function (assert) {\n    assert.expect(4);\n    visit('/dictionary/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"\");\n      assert.equal(find('div.md-form-select select').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary completed form', function (assert) {\n    assert.expect(4);\n    visit('/dictionary/new');\n    fillIn('input:eq(0)', 'Dictionary Name');\n    fillIn('div.md-form-select select', 'aggregate');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"Dictionary Name\");\n      assert.equal(find('div.md-form-select select').val(), \"aggregate\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary missing dictionary name', function (assert) {\n    assert.expect(2);\n    visit('/dictionary/new');\n    fillIn('div.md-form-select select', 'aggregate');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new dictionary missing data resource type', function (assert) {\n    assert.expect(2);\n    visit('/dictionary/new');\n    fillIn('input:eq(0)', 'Dictionary Name');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/dictionary/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/pods/dictionary/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/dictionary/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/acceptance/pods/record/new-test', ['exports', 'qunit', 'mdeditor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _mdeditorTestsHelpersModuleForAcceptance) {\n\n  (0, _mdeditorTestsHelpersModuleForAcceptance['default'])('Acceptance | pods/record/new');\n\n  (0, _qunit.test)('visiting /pods/record/new', function (assert) {\n    visit('/record/new');\n    andThen(function () {\n      assert.equal(currentURL(), '/record/new');\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record initial page conditions', function (assert) {\n    assert.expect(4);\n    visit('/record/new');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"\");\n      assert.equal(find('div.md-form-select select').val(), \"\");\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 2);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record completed form', function (assert) {\n    assert.expect(4);\n    visit('/record/new');\n    fillIn('input:eq(0)', 'Record Title');\n    fillIn('div.md-form-select select', 'attribute');\n    andThen(function () {\n      assert.equal(find('input:eq(0)').val(), \"Record Title\");\n      assert.equal(find('div.md-form-select select').val(), \"attribute\");\n      assert.equal(find('button.md-form-save').prop('disabled'), false);\n      assert.equal(find('div.md-form-alert').length, 0);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record missing record title', function (assert) {\n    assert.expect(2);\n    visit('/record/new');\n    fillIn('div.md-form-select select', 'attribute');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('test new mdJSON record missing data record type (scope)', function (assert) {\n    assert.expect(2);\n    visit('/record/new');\n    fillIn('input:eq(0)', 'Record Title');\n    andThen(function () {\n      assert.equal(find('button.md-form-save').prop('disabled'), true);\n      assert.equal(find('div.md-form-alert').length, 1);\n    });\n  });\n});","define('mdeditor/tests/acceptance/pods/record/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/pods/record/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pods/record/new-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/add-em.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/add-em.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/add-em.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-contact\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createContact;\n\n  function createContact(total) {\n\n    var contacts = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var contact = _ember[\"default\"].Object.create({\n\n        json: {\n          \"contactId\": i,\n          \"organizationName\": null,\n          \"individualName\": \"Contact\" + i,\n          \"positionName\": null,\n          \"phoneBook\": [],\n          \"address\": {},\n          \"onlineResource\": [],\n          \"contactInstructions\": null\n        },\n        title: 'Contact' + i,\n        icon: 'user'\n      });\n\n      contacts.push(contact);\n    }\n\n    return contacts;\n  }\n});","define('mdeditor/tests/helpers/create-contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/create-contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-contact.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-dictionary\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createDictionary;\n\n  function createDictionary(total) {\n\n    var dictionaries = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var dictionary = _ember[\"default\"].Object.create({\n\n        json: {\n          \"dictionaryInfo\": {\n            \"citation\": {\n              \"title\": \"My Dictionary\",\n              \"date\": [{\n                \"date\": new Date().toISOString(),\n                \"dateType\": \"creation\"\n              }]\n            },\n            \"description\": \"Data dictionary.\",\n            \"resourceType\": null\n          },\n          \"domain\": [],\n          \"entity\": []\n        },\n        title: 'My Dictionary' + i,\n        icon: 'book'\n      });\n\n      dictionaries.push(dictionary);\n    }\n\n    return dictionaries;\n  }\n});","define('mdeditor/tests/helpers/create-dictionary.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/create-dictionary.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-dictionary.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/create-map-layer', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = createMapLayer;\n\n  function createMapLayer(total) {\n\n    var layers = {\n      type: 'FeatureCollection',\n      features: []\n    };\n\n    for (var i = 1; i < total + 1; i++) {\n\n      var layer = _ember['default'].Object.create({\n        type: 'Feature',\n        id: i,\n        geometry: {\n          type: 'Point',\n          coordinates: [125.6, 10.1]\n        },\n        properties: {\n          name: 'Feature ' + i\n        }\n      });\n\n      layers.features.push(layer);\n    }\n\n    return layers;\n  }\n});","define('mdeditor/tests/helpers/create-map-layer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/create-map-layer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-map-layer.js should pass jshint.');\n  });\n});","define(\"mdeditor/tests/helpers/create-record\", [\"exports\", \"ember\"], function (exports, _ember) {\n  exports[\"default\"] = createRecord;\n\n  function createRecord(total) {\n\n    var records = [];\n\n    for (var i = 0; i < total; i++) {\n\n      var record = _ember[\"default\"].Object.create({\n\n        json: {\n          \"version\": {\n            \"name\": \"mdJson\",\n            \"version\": \"1.0.0\"\n          },\n          \"record\": [],\n          \"metadata\": {\n            \"metadataInfo\": {\n              \"metadataIdentifier\": {\n                \"identifier\": 'r' + i,\n                \"type\": \"uuid\"\n              }\n            },\n            \"resourceInfo\": {\n              \"resourceType\": null,\n              \"citation\": {\n                \"title\": \"My Record\" + i,\n                \"date\": [{\n                  \"date\": new Date().toISOString(),\n                  \"dateType\": \"creation\"\n                }]\n              },\n              \"pointOfrecord\": [],\n              \"abstract\": null,\n              \"status\": null,\n              \"language\": [\"eng; USA\"]\n            }\n          }\n        },\n        title: 'My Record' + i,\n        icon: 'project'\n      });\n\n      records.push(record);\n    }\n\n    return records;\n  }\n});","define('mdeditor/tests/helpers/create-record.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/create-record.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-record.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mdeditor/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/ember-cli-file-picker', ['exports', 'ember'], function (exports, _ember) {\n\n  function createFile() {\n    var content = arguments.length <= 0 || arguments[0] === undefined ? ['test'] : arguments[0];\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var name = options.name;\n    var type = options.type;\n    var lastModifiedDate = options.lastModifiedDate;\n\n    var file = new Blob(content, { type: type ? type : 'text/plain' });\n    file.name = name ? name : 'test.txt';\n\n    return file;\n  }\n\n  var uploadFileHelper = function uploadFileHelper(content, options) {\n    var file = createFile(content, options);\n\n    var event = jQuery.Event('change');\n    event.target = {\n      files: [file]\n    };\n\n    this.$('.file-picker__input').trigger(event);\n  };\n\n  var uploadFile = _ember['default'].Test.registerAsyncHelper('uploadFile', function (app, content, options) {\n    var file = createFile(content, options);\n\n    return triggerEvent('.file-picker__input', 'change', { target: { files: [file] } });\n  });\n\n  exports.uploadFile = uploadFile;\n  exports.uploadFileHelper = uploadFileHelper;\n});\n/* global Blob, jQuery */","define('mdeditor/tests/helpers/flash-message', ['exports', 'ember', 'ember-cli-flash/flash/object'], function (exports, _ember, _emberCliFlashFlashObject) {\n  var K = _ember['default'].K;\n\n  _emberCliFlashFlashObject['default'].reopen({ init: K });\n});","define('mdeditor/tests/helpers/flash-message.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/flash-message.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/flash-message.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/get-property.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/get-property.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-property.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/modal-asserts', ['exports', 'ember', 'qunit'], function (exports, _ember, _qunit) {\n  exports['default'] = registerAssertHelpers;\n\n  function registerAssertHelpers() {\n    var assert = _qunit['default'].assert;\n\n    var overlaySelector = '.md-modal-overlay';\n    var dialogSelector = '.ember-modal-dialog';\n\n    assert.isPresentOnce = function (selector, message) {\n      message = message || selector + ' is present in DOM once';\n      return this.equal(_ember['default'].$(selector).length, 1, message);\n    };\n\n    assert.isAbsent = function (selector, message) {\n      message = message || selector + ' is absent from DOM';\n      return this.equal(_ember['default'].$(selector).length, 0, message);\n    };\n\n    assert.isVisible = function (selector, message) {\n      message = message || selector + ' is not visible';\n      return this.ok(_ember['default'].$(selector).is(':visible'), message);\n    };\n\n    assert.dialogOpensAndCloses = function (options, message) {\n      message = message || 'Dialog triggered by ' + options.openSelector + ' failed to open and close';\n      var dialogContent = options.dialogText ? [dialogSelector, ':contains(' + options.dialogText + ')'].join('') : dialogSelector;\n      var self = this;\n      return click(options.openSelector, options.context).then(function () {\n        if (options.hasOverlay) {\n          self.isPresentOnce(overlaySelector);\n        }\n        self.isPresentOnce(dialogContent);\n        if (options.whileOpen) {\n          options.whileOpen();\n        }\n        return click(options.closeSelector, options.context).then(function () {\n          self.isAbsent(overlaySelector);\n          self.isAbsent(dialogContent);\n        });\n      });\n    };\n  }\n});","define('mdeditor/tests/helpers/modal-asserts.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/modal-asserts.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/modal-asserts.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'mdeditor/tests/helpers/start-app', 'mdeditor/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _mdeditorTestsHelpersStartApp, _mdeditorTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mdeditorTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _mdeditorTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('mdeditor/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/resolver', ['exports', 'mdeditor/resolver', 'mdeditor/config/environment'], function (exports, _mdeditorResolver, _mdeditorConfigEnvironment) {\n\n  var resolver = _mdeditorResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mdeditorConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mdeditorConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mdeditor/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/start-app', ['exports', 'ember', 'mdeditor/app', 'mdeditor/config/environment', 'mdeditor/tests/helpers/modal-asserts'], function (exports, _ember, _mdeditorApp, _mdeditorConfigEnvironment, _mdeditorTestsHelpersModalAsserts) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _mdeditorConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _mdeditorApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      (0, _mdeditorTestsHelpersModalAsserts['default'])();\n    });\n\n    return application;\n  }\n});","define('mdeditor/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mdeditor/tests/helpers/uc-words.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/uc-words.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/uc-words.js should pass jshint.');\n  });\n});","define('mdeditor/tests/initializers/leaflet.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/leaflet.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/leaflet.js should pass jshint.');\n  });\n});","define('mdeditor/tests/instance-initializers/settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/settings.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/feature-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('feature-form', 'Integration | Component | feature form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('model', {\n      id: 'foo',\n      properties: {\n        name: 'bar',\n        description: 'foobar'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'feature-form', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [1, 21], [1, 26]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 28]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|').trim(), '|Feature|ID|Name|Description|Other|Properties|read-only|Name|Value|None|found.|');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'feature-form', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [2, 26], [2, 31]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|').trim(), '|Feature|ID|Name|Description|Other|Properties|read-only|Name|Value|None|found.|template|block|text|');\n  });\n});","define('mdeditor/tests/integration/components/feature-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/feature-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/feature-form-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/feature-group-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-map-layer'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateMapLayer) {\n\n  (0, _emberQunit.moduleForComponent)('feature-group', 'Integration | Component | feature group', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('layers', (0, _mdeditorTestsHelpersCreateMapLayer['default'])(2));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'revision': 'Ember@2.7.3',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 4,\n                  'column': 6\n                },\n                'end': {\n                  'line': 6,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n              return morphs;\n            },\n            statements: [['inline', 'tile-layer', [], ['url', 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png', 'attribution', ['subexpr', '@mut', [['get', 'mapAttribution', ['loc', [null, [5, 90], [5, 104]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [5, 8], [5, 106]]], 0, 0]],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        var child1 = (function () {\n          var child0 = (function () {\n            return {\n              meta: {\n                'revision': 'Ember@2.7.3',\n                'loc': {\n                  'source': null,\n                  'start': {\n                    'line': 9,\n                    'column': 8\n                  },\n                  'end': {\n                    'line': 11,\n                    'column': 8\n                  }\n                }\n              },\n              isEmpty: false,\n              arity: 1,\n              cachedFragment: null,\n              hasRendered: false,\n              buildFragment: function buildFragment(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode('          ');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment('');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode('\\n');\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                var morphs = new Array(1);\n                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                return morphs;\n              },\n              statements: [['inline', 'geojson-layer', [], ['geoJSON', ['subexpr', '@mut', [['get', 'l', ['loc', [null, [10, 34], [10, 35]]], 0, 0, 0, 0]], [], [], 0, 0], 'draw', true], ['loc', [null, [10, 10], [10, 47]]], 0, 0]],\n              locals: ['l'],\n              templates: []\n            };\n          })();\n\n          return {\n            meta: {\n              'revision': 'Ember@2.7.3',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 8,\n                  'column': 6\n                },\n                'end': {\n                  'line': 12,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n              dom.insertBoundary(fragment, 0);\n              dom.insertBoundary(fragment, null);\n              return morphs;\n            },\n            statements: [['block', 'each', [['get', 'layers', ['loc', [null, [9, 16], [9, 22]]], 0, 0, 0, 0]], [], 0, null, ['loc', [null, [9, 8], [11, 17]]]]],\n            locals: [],\n            templates: [child0]\n          };\n        })();\n\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 15,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(3);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            return morphs;\n          },\n          statements: [['block', 'layer-group', [], ['name', 'Terrain', 'baselayer', true, 'default', true], 0, null, ['loc', [null, [4, 6], [6, 22]]]], ['block', 'feature-group', [], ['name', 'Extents', 'default', true], 1, null, ['loc', [null, [8, 6], [12, 24]]]], ['content', 'layer-control', ['loc', [null, [14, 6], [14, 23]]], 0, 0, 0, 0]],\n          locals: [],\n          templates: [child0, child1]\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 16,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'leaflet-draw', [], ['lat', 0, 'lng', 0, 'zoom', 2], 0, null, ['loc', [null, [2, 4], [15, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '+- Terrain Extents3000 km2000 miLeaflet');\n  });\n});","define('mdeditor/tests/integration/components/feature-group-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/feature-group-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/feature-group-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/feature-table-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-map-layer'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateMapLayer) {\n\n  (0, _emberQunit.moduleForComponent)('feature-table', 'Integration | Component | feature table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('data', (0, _mdeditorTestsHelpersCreateMapLayer['default'])(2));\n    this.set('showForm', function () {\n      return false;\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 54\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'feature-table', [], ['data', ['subexpr', '@mut', [['get', 'data.features', ['loc', [null, [1, 21], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0], 'showForm', ['subexpr', '@mut', [['get', 'showForm', ['loc', [null, [1, 44], [1, 52]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 54]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal($(this.$().html().replace('&nbsp;', '')).text().trim().replace(/[ \\n]+/g, '|'), 'Search:|Columns|Show|All|Hide|All|Restore|Defaults|ID|Name|Description|ID|Name|Description|1|Feature|1|2|Feature|2|Show|1|-|2|of|2|10|25|50');\n  });\n});","define('mdeditor/tests/integration/components/feature-table-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/feature-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/feature-table-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/geojson-layer-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-map-layer'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateMapLayer) {\n\n  (0, _emberQunit.moduleForComponent)('geojson-layer', 'Integration | Component | geojson layer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('layers', (0, _mdeditorTestsHelpersCreateMapLayer['default'])(2));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'revision': 'Ember@2.7.3',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 4,\n                  'column': 6\n                },\n                'end': {\n                  'line': 6,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n              return morphs;\n            },\n            statements: [['inline', 'tile-layer', [], ['url', 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png', 'attribution', ['subexpr', '@mut', [['get', 'mapAttribution', ['loc', [null, [5, 90], [5, 104]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [5, 8], [5, 106]]], 0, 0]],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        var child1 = (function () {\n          var child0 = (function () {\n            return {\n              meta: {\n                'revision': 'Ember@2.7.3',\n                'loc': {\n                  'source': null,\n                  'start': {\n                    'line': 9,\n                    'column': 8\n                  },\n                  'end': {\n                    'line': 11,\n                    'column': 8\n                  }\n                }\n              },\n              isEmpty: false,\n              arity: 1,\n              cachedFragment: null,\n              hasRendered: false,\n              buildFragment: function buildFragment(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode('          ');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment('');\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode('\\n');\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                var morphs = new Array(1);\n                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                return morphs;\n              },\n              statements: [['inline', 'geojson-layer', [], ['geoJSON', ['subexpr', '@mut', [['get', 'l', ['loc', [null, [10, 34], [10, 35]]], 0, 0, 0, 0]], [], [], 0, 0], 'draw', true, 'editLayers', ['subexpr', '@mut', [['get', 'layers', ['loc', [null, [10, 57], [10, 63]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [10, 10], [10, 65]]], 0, 0]],\n              locals: ['l'],\n              templates: []\n            };\n          })();\n\n          return {\n            meta: {\n              'revision': 'Ember@2.7.3',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 8,\n                  'column': 6\n                },\n                'end': {\n                  'line': 12,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n              dom.insertBoundary(fragment, 0);\n              dom.insertBoundary(fragment, null);\n              return morphs;\n            },\n            statements: [['block', 'each', [['get', 'layers', ['loc', [null, [9, 16], [9, 22]]], 0, 0, 0, 0]], [], 0, null, ['loc', [null, [9, 8], [11, 17]]]]],\n            locals: [],\n            templates: [child0]\n          };\n        })();\n\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 15,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(3);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            return morphs;\n          },\n          statements: [['block', 'layer-group', [], ['name', 'Terrain', 'baselayer', true, 'default', true], 0, null, ['loc', [null, [4, 6], [6, 22]]]], ['block', 'feature-group', [], ['name', 'Extents', 'default', true], 1, null, ['loc', [null, [8, 6], [12, 24]]]], ['content', 'layer-control', ['loc', [null, [14, 6], [14, 23]]], 0, 0, 0, 0]],\n          locals: [],\n          templates: [child0, child1]\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 16,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'leaflet-draw', [], ['lat', 0, 'lng', 0, 'zoom', 2], 0, null, ['loc', [null, [2, 4], [15, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '+- Terrain Extents3000 km2000 miLeaflet');\n  });\n});","define('mdeditor/tests/integration/components/geojson-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/geojson-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/geojson-layer-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/leaflet-draw-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-map-layer'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateMapLayer) {\n\n  (0, _emberQunit.moduleForComponent)('leaflet-draw', 'Integration | Component | leaflet draw', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('layers', (0, _mdeditorTestsHelpersCreateMapLayer['default'])(2));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        var child0 = (function () {\n          return {\n            meta: {\n              'revision': 'Ember@2.7.3',\n              'loc': {\n                'source': null,\n                'start': {\n                  'line': 4,\n                  'column': 6\n                },\n                'end': {\n                  'line': 6,\n                  'column': 6\n                }\n              }\n            },\n            isEmpty: false,\n            arity: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            buildFragment: function buildFragment(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode('        ');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment('');\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode('\\n');\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n              var morphs = new Array(1);\n              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n              return morphs;\n            },\n            statements: [['inline', 'tile-layer', [], ['url', 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.png', 'attribution', ['subexpr', '@mut', [['get', 'mapAttribution', ['loc', [null, [5, 90], [5, 104]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [5, 8], [5, 106]]], 0, 0]],\n            locals: [],\n            templates: []\n          };\n        })();\n\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 9,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(2);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            return morphs;\n          },\n          statements: [['block', 'layer-group', [], ['name', 'Terrain', 'baselayer', true, 'default', true], 0, null, ['loc', [null, [4, 6], [6, 22]]]], ['content', 'layer-control', ['loc', [null, [8, 6], [8, 23]]], 0, 0, 0, 0]],\n          locals: [],\n          templates: [child0]\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 10,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'leaflet-draw', [], ['lat', 0, 'lng', 0, 'zoom', 2], 0, null, ['loc', [null, [2, 4], [9, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '+- Terrain3000 km2000 miLeaflet');\n  });\n});","define('mdeditor/tests/integration/components/leaflet-draw-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/leaflet-draw-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/leaflet-draw-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/components/leaflet-table-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-map-layer'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateMapLayer) {\n\n  (0, _emberQunit.moduleForComponent)('leaflet-table', 'Integration | Component | leaflet table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('layers', (0, _mdeditorTestsHelpersCreateMapLayer['default'])(2));\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 2,\n              'column': 66\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'leaflet-table', [], ['layers', ['subexpr', '@mut', [['get', 'layers.features', ['loc', [null, [1, 23], [1, 38]]], 0, 0, 0, 0]], [], [], 0, 0], 'resizeEventsEnabled', false, 'resizeDebouncedEventsEnabled', false], ['loc', [null, [1, 0], [2, 66]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal($(this.$().html().replace('&nbsp;', '|')).text().trim().replace(/[ \\n]+/g, '|'), 'Drop|Here!|+-|Terrain|Extents3000|km2000|miLeaflet|||Map|tiles|by|Stamen|Design,|under|CC|BY|3.0.|Data|by|OpenStreetMap,|under|CC|BY|SA.|Feature|Properties|ID|Name|Description|||1|Feature|1|2|Feature|2|Show|1|-|2|of|2|10|25|50');\n  });\n});","define('mdeditor/tests/integration/components/leaflet-table-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/leaflet-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/leaflet-table-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-button-confirm/component-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('control/md-button-confirm', 'Integration | Component | control/md button confirm', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 29\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'control/md-button-confirm', ['loc', [null, [1, 0], [1, 29]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-button-confirm', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('shows and cancels confirm', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      Test\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-button-confirm', [], [], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Test', 'renders button');\n\n    this.$('button').click();\n\n    assert.equal(this.$().text().trim(), 'Confirm', 'renders confirm');\n\n    _ember['default'].run(function () {\n      this.$('button').blur();\n    });\n\n    assert.equal(this.$().text().trim(), 'Test', 'cancels confirm');\n  });\n\n  (0, _emberQunit.test)('performs confirm action', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('externalAction', function (type) {\n      assert.ok(type, type + ' called');\n    });\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      Test\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-button-confirm', [], ['onConfirm', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [2, 51], [2, 65]]], 0, 0, 0, 0], 'onConfirm'], [], ['loc', [null, [2, 43], [2, 78]]], 0, 0]], 0, null, ['loc', [null, [2, 4], [4, 34]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.$('button').click().click();\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-button-confirm/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-button-confirm/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-button-confirm/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-button-modal/component-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/modal-asserts'], function (exports, _emberQunit, _mdeditorTestsHelpersModalAsserts) {\n\n  (0, _mdeditorTestsHelpersModalAsserts['default'])();\n\n  (0, _emberQunit.moduleForComponent)('control/md-button-modal', 'Integration | Component | control/md button modal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'control/md-button-modal', ['loc', [null, [1, 0], [1, 27]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-button-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('shows modal and performs actions', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    var modalDialogService = this.container.lookup('service:modal-dialog');\n    modalDialogService.destinationElementId = 'test-div';\n\n    this.set('externalAction', function (type) {\n      assert.ok(type, type + ' called');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 3,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(' Test\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'test-div');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-button-modal', [], ['message', 'Hello', 'onConfirm', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [4, 42], [4, 56]]], 0, 0, 0, 0], 'confirm'], [], ['loc', [null, [4, 34], [4, 67]]], 0, 0], 'onCancel', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [5, 25], [5, 39]]], 0, 0, 0, 0], 'cancel'], [], ['loc', [null, [5, 17], [5, 49]]], 0, 0]], 0, null, ['loc', [null, [3, 4], [6, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    // click the button\n    this.$('.md-button-modal').click();\n\n    assert.isPresentOnce('.md-modal-overlay');\n\n    var num = this.$('.md-modal-buttons button').length;\n\n    this.$('.md-modal-overlay').click();\n\n    assert.isAbsent('.md-modal-overlay');\n\n    var i = 0;\n\n    // click the modal buttons\n    while (i < num) {\n      this.$('.md-button-modal').click();\n      this.$('.md-modal-buttons button')[i].click();\n      i++;\n    }\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-button-modal/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-button-modal/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-button-modal/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-crud-buttons/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('control/md-crud-buttons', 'Integration | Component | control/md crud buttons', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'control/md-crud-buttons', ['loc', [null, [1, 0], [1, 27]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Save|Cancel|Copy|Delete|');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-crud-buttons', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Save|Cancel|Copy|Delete|template|block|text|');\n  });\n\n  (0, _emberQunit.test)('should trigger external action', function (assert) {\n    assert.expect(4);\n\n    // test double for the external action\n    this.set('externalAction', function (type) {\n      assert.ok(type, type + ' called');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 70\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'control/md-crud-buttons', [], ['doSave', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [1, 41], [1, 55]]], 0, 0, 0, 0], 'doSave'], [], ['loc', [null, [1, 33], [2, 9]]], 0, 0], 'doCancel', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [2, 27], [2, 41]]], 0, 0, 0, 0], 'doCancel'], [], ['loc', [null, [2, 19], [2, 53]]], 0, 0], 'doCopy', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [3, 0], [3, 14]]], 0, 0, 0, 0], 'doCopy'], [], ['loc', [null, [2, 61], [3, 24]]], 0, 0], 'doDelete', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [3, 42], [3, 56]]], 0, 0, 0, 0], 'doDelete'], [], ['loc', [null, [3, 34], [3, 68]]], 0, 0]], ['loc', [null, [1, 0], [3, 70]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // click the buttons\n    this.$('.md-crud-buttons .btn-success').click();\n    this.$('.md-crud-buttons .btn-warning').click();\n    this.$('.md-crud-buttons .btn-info').click();\n    //we have to click delete twice to confirm\n    this.$('.md-crud-buttons .btn-danger').click().click();\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-crud-buttons/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-crud-buttons/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-crud-buttons/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-json-button/component-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('control/md-json-button', 'Integration | Component | control/md json button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('json', {\n      foo: 'bar'\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'control/md-json-button', ['loc', [null, [1, 0], [1, 26]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Preview JSON');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-json-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 31]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('render json modal', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('json', {\n      foo: 'bar'\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 36\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'control/md-json-button', [], ['json', ['subexpr', '@mut', [['get', 'json', ['loc', [null, [1, 30], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 36]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('button').click();\n\n    assert.equal(_ember['default'].$('.md-jsmodal-container').text().trim(), '{\"foo\": \"bar\"}');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-json-button/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-json-button/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-json-button/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-json-viewer/component-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('control/md-json-viewer', 'Integration | Component | control/md json viewer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('render json modal', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('json', {\n      foo: 'bar'\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 36\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'control/md-json-viewer', [], ['json', ['subexpr', '@mut', [['get', 'json', ['loc', [null, [1, 30], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 36]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_ember['default'].$('.md-jsmodal-container').text().trim(), '{\"foo\": \"bar\"}');\n  });\n\n  (0, _emberQunit.test)('render json viewer', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('json', {\n      foo: 'bar'\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 48\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'control/md-json-viewer', [], ['json', ['subexpr', '@mut', [['get', 'json', ['loc', [null, [1, 30], [1, 34]]], 0, 0, 0, 0]], [], [], 0, 0], 'modal', false], ['loc', [null, [1, 0], [1, 48]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '{\"foo\": \"bar\"}');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-json-viewer/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-json-viewer/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-json-viewer/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-modal/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('control/md-modal', 'Integration | Component | control/md modal', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'control/md-modal', ['loc', [null, [1, 0], [1, 20]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'control/md-modal', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mdeditor/tests/integration/pods/components/control/md-modal/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/control/md-modal/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/control/md-modal/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-boolean/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-boolean', 'Integration | Component | input/md boolean', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-boolean', [], ['value', false, 'text', 'Foo Bar', 'label', 'Baz'], ['loc', [null, [1, 0], [1, 60]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Baz|Foo|Bar|');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-boolean', [], ['value', true, 'text', 'Foo Bar', 'label', 'Baz'], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Baz|Foo|Bar|template|block|text|');\n\n    assert.ok(this.$('input').prop('checked'));\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-boolean/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-boolean/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-boolean/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var codelist = _ember['default'].Service.extend({\n    foobar: {\n      codelist: [{\n        code: '001',\n        codeName: 'foo',\n        description: 'This is foo.'\n      }, {\n        code: '002',\n        codeName: 'bar',\n        description: 'This is bar.'\n      }]\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('input/md-codelist-multi', 'Integration | Component | input/md codelist multi', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('service:codelist', codelist);\n      this.inject.service('codelist', {\n        as: 'codelist'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('fooVal', ['foo', 'bar']);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist-multi', [], ['value', '[\"foo\",\"bar\"]', 'create', true, 'mdCodeName', 'foobar'], ['loc', [null, [2, 4], [5, 25]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|×bar×foo|', 'renders with JSON string');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 7,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('p');\n            var el2 = dom.createTextNode('template block text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-codelist-multi', [], ['mdCodeName', 'foobar', 'value', ['subexpr', '@mut', [['get', 'fooVal', ['loc', [null, [4, 12], [4, 18]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ['loc', [null, [2, 4], [7, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|template|block|text|×bar×foo|', 'renders block with array value');\n  });\n\n  (0, _emberQunit.test)('set value action', function (assert) {\n    // test dummy for the external profile action\n    this.on('update', function (actual) {\n      assert.equal(actual, \"['bar']\", 'submitted value is passed to external action');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 40\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist-multi', [], ['create', true, 'value', '[\"foo\"]', 'mdCodeName', 'foobar', 'change', ['subexpr', 'action', ['update', '[\\'bar\\']'], [], ['loc', [null, [5, 11], [5, 38]]], 0, 0]], ['loc', [null, [1, 0], [5, 40]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').trigger('change');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist-multi/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-codelist-multi/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-codelist-multi/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var codelist = _ember['default'].Service.extend({\n    foobar: {\n      codelist: [{\n        code: '001',\n        codeName: 'foo',\n        description: 'This is foo.'\n      }, {\n        code: '002',\n        codeName: 'bar',\n        description: 'This is bar.'\n      }]\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('input/md-codelist', 'Integration | Component | input/md-codelist', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('service:codelist', codelist);\n      this.inject.service('codelist', {\n        as: 'codelist'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 2,\n              'column': 37\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar'], ['loc', [null, [1, 0], [2, 37]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|foo|');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('option');\n            dom.setAttribute(el1, 'value', 'baz');\n            var el2 = dom.createTextNode('baz');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar'], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|bar|foo|baz|foo|', 'render block ok');\n  });\n\n  (0, _emberQunit.test)('set value action', function (assert) {\n    // test dummy for the external profile action\n    this.on('update', function (actual) {\n      assert.equal(actual, 'bar', 'submitted value is passed to external action');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 36\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-codelist', [], ['value', 'foo', 'mdCodeName', 'foobar', 'change', ['subexpr', 'action', ['update', 'bar'], [], ['loc', [null, [3, 11], [3, 34]]], 0, 0]], ['loc', [null, [1, 0], [3, 36]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').trigger('change');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-codelist/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-codelist/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-codelist/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-datetime/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-datetime', 'Integration | Component | input/md datetime', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('renders and binds', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 46\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-datetime', [], ['date', ['subexpr', '@mut', [['get', 'mydate', ['loc', [null, [2, 25], [2, 31]]], 0, 0, 0, 0]], [], [], 0, 0], 'format', 'YYYY-MM-DD', 'placeholder', 'Enter date'], ['loc', [null, [1, 0], [4, 46]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.set('mydate', '1999-12-31T23:59:59.999+0900');\n    assert.equal(this.$('input').val(), '1999-12-31', 'binding works');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-datetime/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-datetime/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-datetime/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-input/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-input', 'Integration | Component | input/md input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-input', [], ['label', 'Foo', 'value', 'Bar', 'maxlength', 100, 'required', 'true', 'class', 'test', 'placeholder', 'Enter FooBar'], ['loc', [null, [2, 4], [8, 34]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('label').text(), 'Foo', 'labeled OK');\n\n    var input = this.$('input');\n    var props = [input.prop('required'), input.prop('maxlength'), input.val(), input.prop('placeholder'), input.hasClass('test')];\n    assert.deepEqual(props, [true, 100, 'Bar', 'Enter FooBar', true], 'properties set OK');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('p');\n            dom.setAttribute(el1, 'class', 'help-block');\n            var el2 = dom.createTextNode('help text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('.help-block').text(), 'help text', 'block renders');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-input/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-input/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-input/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-inputs/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-inputs', 'Integration | Component | input/md inputs', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(3);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['Foo', 'Bar', '']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]], 0, 0, 0, 0]], [], [], 0, 0], 'header', 'Header', 'placeholder', 'Enter Line', 'label', 'Lines', 'buttonText', 'Add One', 'maxlength', 100], ['loc', [null, [2, 4], [8, 21]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Lines|#|Header|0|Delete!|1|Delete!|2|Delete!|Add|One|', 'it renders ok');\n\n    var input = this.$('input').first();\n    var props = [input.prop('maxlength'), input.val(), input.prop('placeholder')];\n    assert.deepEqual(props, [100, 'Foo', 'Enter Line'], 'properties set ok');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-inputs', [], ['buttonTop', true], 0, null, ['loc', [null, [2, 4], [6, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Add|template|block|text|', 'block renders ok');\n  });\n\n  (0, _emberQunit.test)('should update items', function (assert) {\n    //assert.expect(3);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [2, 4], [3, 19]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('input').val(), 'foo', 'starts as foo');\n\n    this.set('model', ['bar']);\n    assert.equal(this.$('input').val(), 'bar', 'updates to bar');\n\n    this.set('model', ['bar', 'baz']);\n    assert.equal(this.$('input').length, 2, 'adds line');\n  });\n\n  (0, _emberQunit.test)('should add/delete item', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [2, 4], [3, 19]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-success').click();\n\n    assert.equal(this.$('input').length, 2, 'adds item');\n\n    this.$('.btn-warning').first().click();\n\n    assert.equal(this.$('input').length, 1, 'deletes item');\n  });\n\n  (0, _emberQunit.test)('add item action', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.set('addItem', function () {\n      assert.ok(true, 'addItem action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]], 0, 0, 0, 0]], [], [], 0, 0], 'addItem', ['subexpr', '@mut', [['get', 'addItem', ['loc', [null, [4, 14], [4, 21]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [2, 4], [4, 23]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-success').click();\n  });\n\n  (0, _emberQunit.test)('delete item actions', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('model', ['foo']);\n\n    this.set('deleteItem', function (idx) {\n      assert.ok(idx > -1, 'deleteItem action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-inputs', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 12], [3, 17]]], 0, 0, 0, 0]], [], [], 0, 0], 'deleteItem', ['subexpr', '@mut', [['get', 'deleteItem', ['loc', [null, [4, 17], [4, 27]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [2, 4], [4, 29]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.btn-warning').first().click();\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-inputs/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-inputs/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-inputs/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select-profile/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-select-profile', 'Integration | Component | input/md select profile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 69\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select-profile', [], ['value', ['subexpr', '@mut', [['get', 'full', ['loc', [null, [1, 32], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0], 'updateProfile', 'updateProfile'], ['loc', [null, [1, 0], [1, 69]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Profile|basic|full|Choose|profile|');\n  });\n\n  (0, _emberQunit.test)('should trigger external action on change', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    // test dummy for the external profile action\n    this.set('updateProfile', function (actual) {\n      assert.equal(actual, 'basic', 'submitted value is passed to external action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 75\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select-profile', [], ['value', ['subexpr', '@mut', [['get', 'full', ['loc', [null, [1, 32], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0], 'updateProfile', ['subexpr', 'action', [['get', 'updateProfile', ['loc', [null, [1, 59], [1, 72]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 51], [1, 73]]], 0, 0]], ['loc', [null, [1, 0], [1, 75]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // select a value and force an onchange\n    this.$('select').val('basic');\n    this.$('select').change();\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select-profile/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-select-profile/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-select-profile/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-select', 'Integration | Component | input/md select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('objArray', [_ember['default'].Object.create({\n      id: 1,\n      name: 'foo',\n      tip: 'bar'\n    })]);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select', [], ['value', 1, 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]], 0, 0, 0, 0]], [], [], 0, 0], 'valuePath', 'id', 'namePath', 'name', 'tooltipPath', 'tip', 'placeholder', 'Select one'], ['loc', [null, [2, 4], [8, 32]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|foo|', 'renders ok');\n\n    // Template block usage:\" + EOL +\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 9,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('option');\n            dom.setAttribute(el1, 'value', '2');\n            var el2 = dom.createTextNode('bar');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 10,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-select', [], ['value', 1, 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]], 0, 0, 0, 0]], [], [], 0, 0], 'valuePath', 'id', 'namePath', 'name'], 0, null, ['loc', [null, [2, 4], [9, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|bar|foo|', 'renders block ok');\n  });\n\n  (0, _emberQunit.test)('set value', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n    this.set('objArray', [_ember['default'].Object.create({\n      id: 1,\n      name: 'foo',\n      tip: 'bar'\n    }), _ember['default'].Object.create({\n      id: 2,\n      name: 'baz',\n      tip: 'biz'\n    })]);\n\n    this.set('val', '1');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-select', [], ['value', ['subexpr', '@mut', [['get', 'val', ['loc', [null, [3, 12], [3, 15]]], 0, 0, 0, 0]], [], [], 0, 0], 'objectArray', ['subexpr', '@mut', [['get', 'objArray', ['loc', [null, [4, 18], [4, 26]]], 0, 0, 0, 0]], [], [], 0, 0], 'valuePath', 'id', 'namePath', 'name'], ['loc', [null, [2, 4], [6, 23]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('select').val(2).trigger('change');\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|foo|baz|baz|', 'display value updates');\n\n    assert.equal(this.get('val'), 2, 'value is set');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-select/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-select/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-select/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-textarea/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('input/md-textarea', 'Integration | Component | input/md textarea', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'input/md-textarea', [], ['value', 'Foo bar baz', 'label', 'FooBar', 'placeholder', 'placeholder', 'rows', 10], ['loc', [null, [2, 4], [6, 13]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('textarea').val(), 'Foo bar baz');\n\n    assert.equal(this.$('label').text(), 'FooBar', 'label renders');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'input/md-textarea', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text', 'block renders');\n  });\n});","define('mdeditor/tests/integration/pods/components/input/md-textarea/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/input/md-textarea/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/input/md-textarea/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-main', 'Integration | Component | md nav main', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-main', ['loc', [null, [1, 0], [1, 22]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Toggle|navigation|Dashboard|Export|Import|Settings|');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'record/show/edit/nav', ['loc', [null, [3, 26], [3, 50]]], 0, 0, 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'layout/md-nav-main', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|Toggle|navigation|Dashboard|Export|Import|template|block|text|Settings|');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-main/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/layout/md-nav-main/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-main/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  //Stub profile service\n  var profileStub = _ember['default'].Service.extend({\n    getActiveProfile: function getActiveProfile() {\n      var active = this.get('active');\n      var profile = active && typeof active === 'string' ? active : 'full';\n      var profiles = this.get('profiles');\n\n      return profiles[profile];\n    },\n    profiles: {\n      full: {\n        profile: null,\n        secondaryNav: [{\n          title: 'Foo',\n          target: 'record.show.edit.index'\n\n        }, {\n          title: 'Bar',\n          target: 'record.show.edit.metadata'\n\n        }]\n      },\n      basic: {\n        profile: null,\n        secondaryNav: [{\n          title: 'FooBar',\n          target: 'record.show.edit.index'\n\n        }, {\n          title: 'BarFoo',\n          target: 'record.show.edit.metadata'\n\n        }]\n      }\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-secondary', 'Integration | Component | md nav secondary', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:profile', profileStub);\n      // Calling inject puts the service instance in the test's context,\n      // making it accessible as \"locationService\" within each test\n      this.inject.service('profile', {\n        as: 'profileService'\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-secondary', ['loc', [null, [1, 0], [1, 27]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|Foo|Bar|');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('li');\n            var el2 = dom.createTextNode('template block text');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'layout/md-nav-secondary', [], [], 0, null, ['loc', [null, [2, 4], [4, 32]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|Foo|Bar|template|block|text|');\n  });\n\n  (0, _emberQunit.test)('render after setting profile', function (assert) {\n    assert.expect(1);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('profileService.active', 'basic');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-secondary', ['loc', [null, [1, 0], [1, 27]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|More|FooBar|BarFoo|');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-secondary/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/layout/md-nav-secondary/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-secondary/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test', ['exports', 'ember-qunit', 'mdeditor/tests/helpers/create-contact', 'mdeditor/tests/helpers/create-record', 'mdeditor/tests/helpers/create-dictionary'], function (exports, _emberQunit, _mdeditorTestsHelpersCreateContact, _mdeditorTestsHelpersCreateRecord, _mdeditorTestsHelpersCreateDictionary) {\n\n  (0, _emberQunit.moduleForComponent)('layout/md-nav-sidebar', 'Integration | Component | md nav sidebar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(1);\n\n    var contacts = (0, _mdeditorTestsHelpersCreateContact['default'])(2);\n    contacts.meta = {\n      type: 'contact',\n      list: 'contacts',\n      title: 'Contacts'\n    };\n\n    var records = (0, _mdeditorTestsHelpersCreateRecord['default'])(2);\n    records.meta = {\n      type: 'record',\n      list: 'records',\n      title: 'Records'\n    };\n\n    var dicts = (0, _mdeditorTestsHelpersCreateDictionary['default'])(2);\n    dicts.meta = {\n      type: 'dictionary',\n      list: 'dictionaries',\n      title: 'Dictionaries'\n    };\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('model', [records, contacts, dicts]);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 37\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layout/md-nav-sidebar', [], ['items', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [1, 30], [1, 35]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 37]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().replace(/[ \\n]+/g, '|'), '|mdditor|Records|(2)|My|Record0|My|Record1|Contacts|(2)|Contact0|Contact1|Dictionaries|(2)|My|Dictionary0|My|Dictionary1|');\n  });\n\n  (0, _emberQunit.test)('toggle help action', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 60\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'md-sidebar-wrapper');\n          var el2 = dom.createComment('');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-sidebar', ['loc', [null, [1, 29], [1, 54]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    this.$('#md-btn-help').click();\n    assert.ok(this.$('#md-sidebar-wrapper').hasClass('help'));\n  });\n\n  (0, _emberQunit.test)('toggle sidebar action', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 87\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'id', 'md-wrapper');\n          var el2 = dom.createElement('div');\n          dom.setAttribute(el2, 'id', 'md-sidebar-wrapper');\n          var el3 = dom.createComment('');\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);\n          return morphs;\n        },\n        statements: [['content', 'layout/md-nav-sidebar', ['loc', [null, [1, 50], [1, 75]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    this.$('.sidebar-brand-link').click();\n    assert.ok(this.$('#md-wrapper').hasClass('toggled'));\n  });\n});","define('mdeditor/tests/integration/pods/components/layout/md-nav-sidebar/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/layout/md-nav-sidebar/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/layout/md-nav-sidebar/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/integration/pods/components/md-help/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('md-help', 'Integration | Component | md help', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'md-help', ['loc', [null, [1, 0], [1, 11]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$().text().indexOf('Lorem ipsum' > 0));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'md-help', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(this.$().text().trim().indexOf('template block text' > 0));\n  });\n});","define('mdeditor/tests/integration/pods/components/md-help/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/md-help/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/md-help/component-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/contact.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/contact.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/dictionary.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/dictionary.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/dictionary.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/record.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/record.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/record.js should pass jshint.');\n  });\n});","define('mdeditor/tests/models/setting.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/setting.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/setting.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-button-confirm/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-button-confirm/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-button-confirm/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-button-modal/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-button-modal/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-button-modal/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-crud-buttons/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-crud-buttons/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-crud-buttons/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-json-button/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-json-button/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-json-button/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-json-viewer/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-json-viewer/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-json-viewer/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/control/md-modal/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/control/md-modal/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/control/md-modal/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-boolean/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-boolean/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-boolean/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-codelist-multi/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-codelist-multi/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-codelist-multi/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-codelist/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-codelist/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-codelist/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-datetime/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-datetime/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-datetime/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-input/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-input/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-input/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-inputs/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-inputs/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-inputs/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-select-profile/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-select-profile/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-select-profile/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-select/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-select/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-select/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/input/md-textarea/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/input/md-textarea/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/input/md-textarea/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-breadcrumb/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/layout/md-breadcrumb/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-breadcrumb/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-main/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/layout/md-nav-main/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-main/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-secondary/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/layout/md-nav-secondary/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-secondary/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/layout/md-nav-sidebar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/layout/md-nav-sidebar/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/layout/md-nav-sidebar/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/md-help/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/md-help/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/md-help/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/object/md-address/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/object/md-address/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/object/md-address/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/object/md-object-table/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/object/md-object-table/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/object/md-object-table/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/object/md-online-resource-array/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/object/md-online-resource-array/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/object/md-online-resource-array/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/components/object/md-phone-array/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/object/md-phone-array/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/object/md-phone-array/component.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/contact/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/contact/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/contact/show/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contact/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/contact/show/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contact/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/contacts/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/contacts/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/contacts/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dashboard/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dashboard/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dashboard/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionaries/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionaries/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionaries/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/domains/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/show/edit/domains/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/domains/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/entities/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/show/edit/entities/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/entities/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/show/edit/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/index/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/show/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/dictionary/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/dictionary/show/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/dictionary/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/export/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/export/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/export/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/help/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/help/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/help/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/import/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/import/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/import/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/publish/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/publish/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/publish/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/new/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/associated/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/associated/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/associated/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/coverages/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/coverages/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/coverages/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/distribution/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/distribution/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/distribution/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/documents/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/documents/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/documents/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/grid/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/grid/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/grid/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/index/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/keywords/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/keywords/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/keywords/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/metadata/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/metadata/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/metadata/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/quality/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/quality/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/quality/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/edit/spatial/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/edit/spatial/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/edit/spatial/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/record/show/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/record/show/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/record/show/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/records/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/records/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/records/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/save/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/save/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/save/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/settings/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/settings/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/settings/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/pods/translate/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/translate/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/translate/route.js should pass jshint.');\n  });\n});","define('mdeditor/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('mdeditor/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mdeditor/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('mdeditor/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/codelist.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/codelist.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/codelist.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/icon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/icon.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/icon.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/jsonvalidator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/jsonvalidator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/jsonvalidator.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/profile.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/profile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/profile.js should pass jshint.');\n  });\n});","define('mdeditor/tests/services/settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/settings.js should pass jshint.');\n  });\n});","define('mdeditor/tests/test-helper', ['exports', 'mdeditor/tests/helpers/resolver', 'mdeditor/tests/helpers/flash-message', 'ember-qunit'], function (exports, _mdeditorTestsHelpersResolver, _mdeditorTestsHelpersFlashMessage, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mdeditorTestsHelpersResolver['default']);\n});","define('mdeditor/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mdeditor/tests/transforms/json.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/json.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/json.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  (0, _emberQunit.test)('it has a importData method', function (assert) {\n    var adapter = this.subject();\n    assert.ok(typeof adapter.importData === 'function');\n  });\n\n  (0, _emberQunit.test)('it has a exportData method', function (assert) {\n    var adapter = this.subject();\n    assert.ok(typeof adapter.exportData === 'function');\n  });\n});","define('mdeditor/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/initializers/leaflet-test', ['exports', 'ember', 'mdeditor/initializers/leaflet', 'qunit'], function (exports, _ember, _mdeditorInitializersLeaflet, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | leaflet', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _mdeditorInitializersLeaflet['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('mdeditor/tests/unit/initializers/leaflet-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/leaflet-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/leaflet-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/instance-initializers/settings-test', ['exports', 'ember', 'mdeditor/instance-initializers/settings', 'qunit', 'mdeditor/tests/helpers/destroy-app'], function (exports, _ember, _mdeditorInstanceInitializersSettings, _qunit, _mdeditorTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | settings', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _mdeditorTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _mdeditorInstanceInitializersSettings.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('mdeditor/tests/unit/instance-initializers/settings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/settings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/settings-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('contact', 'Unit | Model | contact', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(2);\n    me.set('json.individualName', undefined);\n    me.set('json.organizationName', 'bar');\n    assert.equal(me.get('title'), 'bar');\n    me.set('json.individualName', 'foo');\n    assert.equal(me.get('title'), 'foo');\n  });\n\n  (0, _emberQunit.test)('should correctly compute icon', function (assert) {\n    var me = this.subject();\n\n    assert.expect(2);\n    me.set('json.individualName', undefined);\n    me.set('json.organizationName', 'bar');\n    assert.equal(me.get('icon'), 'users');\n    me.set('json.individualName', 'foo');\n    assert.equal(me.get('icon'), 'user');\n  });\n});","define('mdeditor/tests/unit/models/contact-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/contact-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/contact-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/dictionary-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('dictionary', 'Unit | Model | dictionary', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(1);\n    me.set('json.dictionaryInfo.citation.title', 'bar');\n    assert.equal(me.get('title'), 'bar');\n  });\n});","define('mdeditor/tests/unit/models/dictionary-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/dictionary-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/dictionary-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/record-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('record', 'Unit | Model | record', {\n    // Specify the other units that are required for this test.\n    needs: ['service:icon']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('should correctly compute title', function (assert) {\n    var me = this.subject();\n\n    assert.expect(1);\n    me.set('json.metadata.resourceInfo.citation.title', 'foo');\n    assert.equal(me.get('title'), 'foo');\n  });\n\n  (0, _emberQunit.test)('should correctly compute icon', function (assert) {\n    var me = this.subject();\n    var list = _ember['default'].getOwner(this).lookup('service:icon');\n\n    assert.expect(1);\n    me.set('json.metadata.resourceInfo.resourceType', 'project');\n    assert.equal(me.get('icon'), list.get('project'));\n  });\n});","define('mdeditor/tests/unit/models/record-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/record-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/record-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/models/setting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('setting', 'Unit | Model | setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('mdeditor/tests/unit/models/setting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/setting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/setting-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/new', 'Unit | Route | contact/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/contact/new/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/show/edit', 'Unit | Route | contact/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/contact/show/edit/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact/show', 'Unit | Route | contact/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contact/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/contact/show/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contact/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/contacts/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:contacts', 'Unit | Route | contacts', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/contacts/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/contacts/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/contacts/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dashboard/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dashboard/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dashboard/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dashboard/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionaries/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:dictionaries', 'Unit | Route | dictionaries', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('should display a confirm', function (assert) {\n    assert.expect(2);\n\n    var route = this.subject();\n\n    // test _deleteItem to displays the expected window.confirm message\n    var expectedTextFoo = 'foo';\n    window.confirm = function (message) {\n      assert.equal(message, expectedTextFoo, 'expect confirm to display ${expectedTextFoo}');\n    };\n    route._deleteItem(0, expectedTextFoo);\n\n    // test action deleteItem calls _deleteItem and displays a window.confirm\n    window.confirm = function (message) {\n      assert.ok(message, 'expect confirm to display a message');\n    };\n    route.send('deleteItem', 0);\n  });\n});","define('mdeditor/tests/unit/pods/dictionaries/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionaries/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionaries/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/new', 'Unit | Route | dictionary/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/new/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/domains', 'Unit | Route | dictionary/edit/domains', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/domains/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/show/edit/domains/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/domains/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/entities', 'Unit | Route | dictionary/edit/entities', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/entities/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/show/edit/entities/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/entities/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit/index', 'Unit | Route | dictionary/show/edit/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/show/edit/index/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/index/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show/edit', 'Unit | Route | dictionary/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/show/edit/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dictionary/show', 'Unit | Route | dictionary/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/dictionary/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/dictionary/show/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/dictionary/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/export/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:save', 'Unit | Route | save', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/export/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/export/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/export/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/help/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:help', 'Unit | Route | help', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/help/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/help/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/help/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/import/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:import', 'Unit | Route | import', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/import/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/import/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/import/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/publish/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:publish', 'Unit | Route | publish', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/publish/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/publish/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/publish/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/new', 'Unit | Route | record/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/new/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/new/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/associated/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/associated', 'Unit | Route | record/edit/associated', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/associated/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/associated/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/associated/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/coverages/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/coverages', 'Unit | Route | record/edit/coverages', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/coverages/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/coverages/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/coverages/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/distribution/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/distribution', 'Unit | Route | record/edit/distribution', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/distribution/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/distribution/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/distribution/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/documents/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/documents', 'Unit | Route | record/edit/documents', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/documents/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/documents/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/documents/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/grid/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/grid', 'Unit | Route | record/edit/grid', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/grid/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/grid/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/grid/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/index', 'Unit | Route | record/show/edit/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/index/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/index/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/keywords/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/keywords', 'Unit | Route | record/edit/keywords', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/keywords/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/keywords/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/keywords/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/metadata/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/metadata', 'Unit | Route | record/show/edit/metadata', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/metadata/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/metadata/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/metadata/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/quality/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/quality', 'Unit | Route | record/edit/quality', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/quality/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/quality/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/quality/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit', 'Unit | Route | record/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/spatial/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show/edit/spatial', 'Unit | Route | record/edit/spatial', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/edit/spatial/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/edit/spatial/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/edit/spatial/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/record/show/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:record/show', 'Unit | Route | record/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/record/show/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/record/show/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/record/show/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/records/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var originalConfirm = undefined;\n\n  (0, _emberQunit.moduleFor)('route:records', 'Unit | Route | records', {\n    beforeEach: function beforeEach() {\n      originalConfirm = window.confirm;\n    },\n\n    afterEach: function afterEach() {\n      window.confirm = originalConfirm;\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('should display a confirm', function (assert) {\n    assert.expect(2);\n\n    var route = this.subject();\n\n    // test _deleteItem to displays the expected window.confirm message\n    var expectedTextFoo = 'foo';\n    window.confirm = function (message) {\n      assert.equal(message, expectedTextFoo, 'expect confirm to display ${expectedTextFoo}');\n    };\n    route._deleteItem(0, expectedTextFoo);\n\n    // test action deleteItem calls _deleteItem and displays a window.confirm\n    window.confirm = function (message) {\n      assert.ok(message, 'expect confirm to display a message');\n    };\n    route.send('deleteItem', 0);\n  });\n});","define('mdeditor/tests/unit/pods/records/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/records/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/records/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/settings/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:settings', 'Unit | Route | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/settings/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/settings/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/settings/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/pods/translate/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:translate', 'Unit | Route | translate', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/pods/translate/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/translate/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/translate/route-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mdeditor/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/serializers/application-test', ['exports', 'ember', 'ember-data', 'ember-qunit'], function (exports, _ember, _emberData, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('serializer:application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['transform:json']\n  });\n\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    assert.expect(2);\n\n    var getOwner = _ember['default'].getOwner;\n\n    var serializer = this.subject();\n    var store = getOwner(this).lookup('service:store');\n    var record = undefined;\n    var expected = {\n      \"data\": {\n        \"attributes\": {\n          \"name\": \"foo\",\n          \"skill\": \"bar\",\n          \"games-played\": \"[100,200]\"\n        },\n        \"type\": \"tests\"\n      }\n    };\n    var data = {\n      id: 1,\n      name: 'foo',\n      skill: 'bar',\n      gamesPlayed: [100, 200]\n    };\n    var model = _emberData['default'].Model.extend({\n      name: _emberData['default'].attr(),\n      skill: _emberData['default'].attr(),\n      gamesPlayed: _emberData['default'].attr('json')\n    });\n\n    this.register('model:test', model);\n\n    _ember['default'].run(function () {\n      record = store.createRecord('test', data);\n    });\n\n    assert.deepEqual(record.serialize(), expected, 'record serialized OK');\n    assert.deepEqual(serializer.serialize(record._createSnapshot()), expected, 'serialized snapshot OK');\n  });\n});","define('mdeditor/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/codelist-test', ['exports', 'ember-qunit', 'npm:mdcodes/resources/js/mdcodes.js'], function (exports, _emberQunit, _npmMdcodesResourcesJsMdcodesJs) {\n\n  (0, _emberQunit.moduleFor)('service:codelist', 'Unit | Service | codelist', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  (0, _emberQunit.test)('all codelists are present', function (assert) {\n    var service = this.subject();\n\n    Object.keys(_npmMdcodesResourcesJsMdcodesJs['default']).forEach(function (key) {\n      var name = key.replace(/^iso_/, '');\n\n      assert.ok(service.get(name), name + ' is present.');\n    });\n  });\n});","define('mdeditor/tests/unit/services/codelist-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/codelist-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/codelist-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/icon-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:icon', 'Unit | Service | icon', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mdeditor/tests/unit/services/icon-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/icon-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/icon-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/jsonvalidator-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:jsonvalidator', 'Unit | Service | jsonvalidator', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  (0, _emberQunit.test)('test jsonapi validation', function (assert) {\n    var service = this.subject();\n    var obj = {\n      \"data\": [{\n        \"id\": \"8ke11eu1\",\n        \"attributes\": {\n          \"profile\": \"full\",\n          \"json\": \"{}\",\n          \"date-updated\": \"2016-09-16T22:08:04.425Z\"\n        },\n        \"type\": \"records\",\n        \"meta\": {\n          \"title\": \"ytr\",\n          \"export\": true\n        }\n      }, {\n        \"id\": \"spt9cadc\",\n        \"attributes\": {\n          \"json\": \"{}\",\n          \"date-updated\": \"2016-09-16T22:08:11.080Z\"\n        },\n        \"type\": \"contacts\",\n        \"meta\": {\n          \"title\": \"ewrrrrrrrrrrrrrr\",\n          \"export\": true\n        }\n      }]\n    };\n\n    assert.ok(service.validate('jsonapi', obj));\n  });\n});","define('mdeditor/tests/unit/services/jsonvalidator-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/jsonvalidator-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/jsonvalidator-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/profile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:profile', 'Unit | Service | profile', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mdeditor/tests/unit/services/profile-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/profile-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/profile-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/services/settings-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:settings', 'Unit | Service | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mdeditor/tests/unit/services/settings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/settings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/settings-test.js should pass jshint.');\n  });\n});","define('mdeditor/tests/unit/transforms/json-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:json', 'Unit | Transform | json', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  (0, _emberQunit.test)('it deserialized', function (assert) {\n    var transform = this.subject();\n    assert.deepEqual(transform.deserialize('{\"foo\":\"bar\"}'), {\n      foo: \"bar\"\n    });\n  });\n\n  (0, _emberQunit.test)('it serialized', function (assert) {\n    var transform = this.subject();\n    assert.equal(transform.serialize({\n      foo: 'bar'\n    }), '{\"foo\":\"bar\"}');\n  });\n});","define('mdeditor/tests/unit/transforms/json-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/json-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/json-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mdeditor/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrzvtjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpptzhtzzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}